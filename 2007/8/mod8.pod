
=for advent_year 2007

=for advent_day 00

=for advent_title Choosing the perfect Secret Santa

=for advent_author David Westbrook

Some of Santa's Reindeer are gathering for a little holiday party, and wish to do I<Secret Santa> for gift-giving, where everyone is assigned each to another to bring a gift.  This can be assigned by drawing a name from a hat, and keeping it if it's someone else, and replacing it if you draw yourself. But Comet and Cupid give each other gifts all the time, and last year Donner gave to Dancer, so those shouldn't occur this year. Which means that the list has to really be checked twice & thrice, also to make sure that no one is left out or doubled up.
M<Math::Combinatorics>, with some F<List::Util> assistance, will give us all the possible combinations to check for one that works.

The approach is make an NxN grid represented by a 1-D array C<0..N*N-1>,
and the solution (if any) will be one of the C<N*N-choose-N> combinations.
So we'll get a random one of those, test it, and repeat until we find one or run out.
Actually, it's (N*N-N-X) choose N, since the diagonal of the NxN, which is N elements,
can immediately be excluded, as can any other (X of them) exclusions provided by the user.

So for N=6, it's a 6x6 grid, with 36 elements 0-35,
from 27 (36 minus 6 diagonals minus 3 exceptions) of which we'll choose 6.
Those 9 exclusions are shown with strike-through in the grid below.
Now C<shuffle()> up the initial order of those 27, and then use F<Math::Combinatorics>
to start iterating through the combinations with the C<next_combination()> method.
Once a combination passes all the checks, we have all our I<Secret Santas> (indicated by yellow in the grid) and display them in the output.

<style type="text/css">
.grid { background-color: white; border: 1px solid black; }
.grid_i, .grid_d, .grid_x { text-align: center }
.grid_d { text-decoration: line-through; background-color: lightgrey; }
.grid_x { text-decoration: line-through; background-color: darkgrey;  }
.grid_m { font-weight: bold; background-color: yellow;  }
</style>
<table class="grid" style="float:left; margin-right: 50px">
<tr><th>&nbsp;</th><th class="grid">0</th><th class="grid">1</th><th class="grid">2</th><th class="grid">3</th><th class="grid">4</th><th class="grid">5</th></tr>
<tr><th class="grid">&nbsp;0&nbsp;</th><td class="grid_d">0</td><td class="grid_i">1</td><td class="grid_m">2</td><td class="grid_i">3</td><td class="grid_i">4</td><td class="grid_i">5</td></tr>
<tr><th class="grid">1</th><td class="grid_i">6</td><td class="grid_d">7</td><td class="grid_i">8</td><td class="grid_m">9</td><td class="grid_i">10</td><td class="grid_i">11</td></tr>
<tr><th class="grid">2</th><td class="grid_i">12</td><td class="grid_m">13</td><td class="grid_d">14</td><td class="grid_x">15</td><td class="grid_i">16</td><td class="grid_i">17</td></tr>
<tr><th class="grid">3</th><td class="grid_i">18</td><td class="grid_i">19</td><td class="grid_x">20</td><td class="grid_d">21</td><td class="grid_m">22</td><td class="grid_i">23</td></tr>
<tr><th class="grid">4</th><td class="grid_i">24</td><td class="grid_x">25</td><td class="grid_i">26</td><td class="grid_i">27</td><td class="grid_d">28</td><td class="grid_m">29</td></tr>
<tr><th class="grid">5</th><td class="grid_m">30</td><td class="grid_i">31</td><td class="grid_i">32</td><td class="grid_i">33</td><td class="grid_i">34</td><td class="grid_d">35</td></tr>
</table>

=begin pre

There are C(27,6) = 296010 total combinations.
Tried 13074 combinations.
Dasher => Comet
Dancer => Cupid
Comet => Dancer
Cupid => Donner
Donner => Blitzen
Blitzen => Dasher

=end pre

<br clear="all">

=sourcedcode modMC.pl

