<?xml version="1.0" encoding="us-ascii"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Perl Advent Calendar 2012</title><id>http://perladvent.org/2012/</id><link href="http://perladvent.org/2012/atom.xml" rel="self"/><updated>2022-11-17T21:59:36Z</updated><author><name>Ricardo Signes</name></author><generator uri="https://metacpan.org/pod/XML::Atom::SimpleFeed" version="0.905">XML::Atom::SimpleFeed</generator><entry><title>So long until next year!</title><link href="http://perladvent.org/2012/2012-12-25.html"/><id>http://perladvent.org/2012/2012-12-25.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;The Advent calendar has ended. It ended yesterday, so behind this door you&#38;#39;re not finding a rich, chocolately article about Perl, but instead a bland note from the editor. Sorry!&lt;/p&gt;

&lt;p&gt;As always, the Perl Advent Calendar was a group effort, and I&#38;#39;d like to thank everyone who contributed this year: Arthur Axel &#38;quot;fREW&#38;quot; Schmidt, Breno G. de Oliveira, Chris Prather, Dave Mitchell, David Golden, Jeffrey Ryan Thalhammer, Jesse Luehrs, Jonathan Swartz, Karen Etheridge, Mark Fowler, Philippe Bruhat (BooK), Rafa&#38;euml;l Garcia-Suarez, Sawyer X, Shawn M Moore, Toby Inkster, and Yanick Champoux.&lt;/p&gt;

&lt;p&gt;If you&#38;#39;d like to contribute an article for next year, you&#38;#39;ve got just about 365 days to do it! This year &#38;mdash; for the first time in years, if not ever &#38;mdash; we had more submissions than we could publish, so we might already have fewer than 24 slots open for 2013. Wow!&lt;/p&gt;

&lt;p&gt;If you want to help with the site or other things in the meantime, you can &lt;a href=&#34;http://mail.pm.org/mailman/listinfo/perladvent&#34;&gt;join our mailing list&lt;/a&gt; where we&#38;#39;ll be talking about work that needs to get done on things like the FAQ, the site generator, and all that sort of thing. You can find the &lt;a href=&#34;https://github.com/rjbs/Perl-Advent&#34;&gt;site&#38;#39;s contents on GitHub&lt;/a&gt;, which &lt;i&gt;should&lt;/i&gt; contain the 2012 articles by the time you see this. It&#38;#39;s not exactly how it should be, but it&#38;#39;s there.&lt;/p&gt;

&lt;p&gt;More importantly, you can find &lt;a href=&#34;https://github.com/rjbs/Perl-Advent/issues&#34;&gt;our wish list for fixes and features&lt;/a&gt;. Help with these and you will earn fame forever (at least in the git logs)!&lt;/p&gt;

&lt;p&gt;So until I&#38;#39;m back at Christmas 2013 &#38;ndash; if I don&#38;#39;t come to my senses and quit this job &#38;ndash; have a merry Christmas and an excellent new year!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rjbs/Perl-Advent&#34;&gt;the project issue tracker&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rjbs/Perl-Advent&#34;&gt;the git repository&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://mail.pm.org/mailman/listinfo/perladvent&#34;&gt;the mailing list&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.perladvent.org/FAQ.html&#34;&gt;the someday-to-be-rewritten FAQ&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-25T00:00:00Z</updated><category term="Perl"/><author><name>Ricardo Signes</name></author></entry><entry><title>Have REST-ful Holidays</title><link href="http://perladvent.org/2012/2012-12-24.html"/><id>http://perladvent.org/2012/2012-12-24.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Have-REST-ful-Holidays&#34;&gt;Have REST-ful Holidays&lt;/h2&gt;

&lt;p&gt;Your boss comes to you the day after Thanksgiving vacation (or if you&#38;#39;re in Scotland, the day after St. Andrew&#38;#39;s Bank Holiday; if you&#38;#39;re not in Scotland or the US, adjust accordingly):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Boss: We need a Web API for the Flibber data. I want it to be REST-ful.

    You:  REST-ful API? Where did you hear about REST?

    Boss: I&#38;#39;ve started reading /r/programming. Everyone is making REST APIs
          now. We need one.

    You: *sigh* I&#38;#39;ll get right on that.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you need to build a REST-ful Web API in time for the Holidays. You may not even know what REST is, beyond some buzzword your boss picked up in an internet back-alley.&lt;/p&gt;

&lt;h2 id=&#34;How-to-Explain-REST-to-Anyone-even-Ryan-Tomaykos-wife&#34;&gt;How to Explain REST to Anyone &#38;hellip; even Ryan Tomayko&#38;#39;s wife.&lt;/h2&gt;

&lt;p&gt;On Ryan Tomayko blog he has &lt;a href=&#34;http://tomayko.com/writings/rest-to-my-wife&#34;&gt;a dialog with his wife&lt;/a&gt; where he explains REST and why it&#38;#39;s important. We really don&#38;#39;t have time to go into all of the details so you should read it, but I&#38;#39;ll try to cover the most important bits.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Ryan: [...] The web is built on an architectural style called REST. REST
          provides a definition of a resource, which is what those things point
          to.

    Wife: A web page is a resource?

    Ryan: Kind of. A web page is a representation of a resource. Resources are
          just concepts. URLs--those things that you type into the browser...

    Wife: I know what a URL is..

    Ryan: Oh, right. Those tell the browser that there&#38;#39;s a concept somewhere. A
          browser can then go ask for a specific representation of the concept.
          Specifically, the browser asks for the web page representation of the
          concept.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically the way the world wide web works is that clients request Representations of Resources identified by URLs (or URIs if you&#38;#39;re pedantic). Clients and Servers use HTTP to give and return these requests. Most requests are by Browsers and they just want an HTML representation, but more and more clients are requesting non-HTML representations too. Thankfully the Web was designed to handle this, if we just write things in the right style.&lt;/p&gt;

&lt;p&gt;REST is the style of writing applications so that they take full advantage of HTTP and the design of the Web. Now you know what REST is. Knowing is half the battle.&lt;/p&gt;

&lt;h2 id=&#34;HTTP-is-Hard&#34;&gt;HTTP is Hard&lt;/h2&gt;

&lt;center&gt;
&lt;a href=&#34;https://raw.github.com/wiki/basho/webmachine/images/http-headers-status-v3.png&#34;&gt;
&lt;img src=&#34;https://raw.github.com/wiki/basho/webmachine/images/http-headers-status-v3.png&#34; width=600 /&gt;
&lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;This is a diagram of the state machine based on the HTTP protocol. It has 57 states asking 50 different questions about how to process any given HTTP request and generate the right response. That&#38;#39;s a lot to keep in your head.&lt;/p&gt;

&lt;p&gt;Luckly there are frameworks on CPAN to help out with these. A good one for demonstrating these is &lt;a href=&#34;https://metacpan.org/release/Web-Machine&#34;&gt;Web::Machine&lt;/a&gt; by Stevan Little. It is based on the Erlang Webmachine project by Basho (makers of Riak!) that generated the state machine diagram.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Web::Machine&lt;/code&gt; is broken into two parts. A Finite State machine that implements the diagram, and a Resource base class that provides sensible defaults that you can override in your own class. Let&#38;#39;s just dive in.&lt;/p&gt;

&lt;p&gt;A note, while &lt;code&gt;Web::Machine&lt;/code&gt; itself works on Perl 5.10.1 or higher, all examples will explicitly be using 5.16.2. Remember if you change the version line to enable strict.&lt;/p&gt;

&lt;h2 id=&#34;Its-a-Time-Machine&#34;&gt;It&#38;#39;s a Time Machine!&lt;/h2&gt;

&lt;p&gt;So let&#38;#39;s start with a basic web service. My Car doesn&#38;#39;t have a clock in it, so to be properly Web 2.0 compliant, I&#38;#39;ll write a JSON service that I can later target with an iOS client that will run from my phone. That won&#38;#39;t be overkill at all.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;5.16.2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Web::Machine&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;WasteOfTime::Resource&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;Web::Machine::Resource&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;JSON::XS&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw(encode_json)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;content_types_provided&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;application/json&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;to_json&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}]&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;to_json&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;encode_json&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;localtime&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;Web::Machine&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;WasteOfTime::Resource&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;to_app&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;Web::Machine&lt;/code&gt; is a toolkit for building Resources. So after the standard boiler plate we start out by defining a resource class. Although &lt;code&gt;Web::Machine&lt;/code&gt; was written by the same guy who brough you &lt;code&gt;Moose&lt;/code&gt; it actually tries to be minimal about it&#38;#39;s dependencies and doesn&#38;#39;t sneak &lt;code&gt;Moose&lt;/code&gt; in under the covers.&lt;/p&gt;

&lt;p&gt;So we create a class &lt;code&gt;WasteOfTime::Resource&lt;/code&gt; that will be our Resource class, and we have it inherit from &lt;code&gt;Web::Machine::Resource&lt;/code&gt; so that &lt;code&gt;Web::Machine&lt;/code&gt; will know it&#38;#39;s a Resource and so that the proper defaults are set. We could be done here, and our application would do nothing but throw a 406 NOT ACCEPTABLE. But that&#38;#39;s less than useful.&lt;/p&gt;

&lt;p&gt;We know we want to provide a JSON API so we override the parent &lt;code&gt;content_types_provided&lt;/code&gt; and say we will provide a representation of &#38;#39;application/json&#38;#39; and that we should use the &lt;code&gt;to_json&lt;/code&gt; method to get it.&lt;/p&gt;

&lt;p&gt;Then we define the to_json representation. This resource doesn&#38;#39;t have any state so we can just build the JSON inline. We use the scalar value of &lt;code&gt;localtime&lt;/code&gt; because we want the nice string format not a list of numbers.&lt;/p&gt;

&lt;p&gt;Finally once our resource class is built, we create a &lt;code&gt;Web::Machine&lt;/code&gt; instance, tell it which resource class to use and then have it provide us a Plack application. If we save all of this in a file (I chose &lt;code&gt;time.psgi&lt;/code&gt;) we can run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ plackup time.psgi
    HTTP::Server::PSGI: Accepting connections at http://0:5000/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which we can now access using a web client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000

    * About to connect() to 0 port 5000 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 0 (127.0.0.1) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: */*
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 200 OK
    &#38;lt; Date: Sun, 09 Dec 2012 02:04:02 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; Content-Length: 35
    &#38;lt; Content-Type: application/json
    &#38;lt;
    * Closing connection #0
    {&#38;quot;time&#38;quot;:&#38;quot;Sat Dec  8 21:04:02 2012&#38;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can see our Representation there at the end. If we try a request that isn&#38;#39;t allowed, say for an HTML representation, we will get the appropriate error too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000 -H&#38;#39;Accept: text/html&#38;#39;

    * About to connect() to 0 port 5000 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 0 (127.0.0.1) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: text/html
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 406 Not Acceptable
    &#38;lt; Date: Sun, 09 Dec 2012 02:07:47 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; Content-Length: 14
    &#38;lt;
    * Closing connection #0
    Not Acceptable&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get that 406 not acceptable again.&lt;/p&gt;

&lt;h2 id=&#34;Many-Ways-to-Say-the-Same-Thing&#34;&gt;Many Ways to Say the Same Thing&lt;/h2&gt;

&lt;p&gt;So far we&#38;#39;re not doing bad for 20 lines of code, but what if we want that HTML representation too? Actually it&#38;#39;s pretty simple. First we add a new content type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub content_types_provided { [
        { &#38;#39;application/json&#38;#39; =&#38;gt; &#38;#39;to_json&#38;#39; },
        { &#38;#39;text/html&#38;#39;        =&#38;gt; &#38;#39;to_html&#38;#39; },
    ] }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We say that &#38;#39;text/html&#38;#39; will be handled by &lt;code&gt;to_html&lt;/code&gt;. Now we just define a &lt;code&gt;to_html&lt;/code&gt; method to return our HTML representation.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;to_html&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;join&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;html&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;head&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;title&#38;gt;The Time Now Is:&#38;lt;/title&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;/head&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;body&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;h1&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;localtime&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;/h1&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;/body&#38;gt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;/html&#38;gt;&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Notice that &lt;code&gt;Web::Machine&lt;/code&gt; doesn&#38;#39;t have any opinion on how you generate HTML. You&#38;#39;re free to use whatever template system you want. You&#38;#39;re also free to write all of the glue code for that. &lt;code&gt;Web::Machine&lt;/code&gt; is pretty bare bones about that, this is why it&#38;#39;s called a toolkit and not a framework.&lt;/p&gt;

&lt;p&gt;So if we add this code and we issue that last request we can see the change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000 -H&#38;#39;Accept: text/html&#38;#39;

    * About to connect() to 0 port 5000 (#0)
    *   Trying 0.0.0.0... connected
    * Connected to 0 (0.0.0.0) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: text/html
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 200 OK
    &#38;lt; Date: Sun, 09 Dec 2012 02:26:39 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; Vary: Accept
    &#38;lt; Content-Length: 103
    &#38;lt; Content-Type: text/html
    &#38;lt;
    * Closing connection #0
    &#38;lt;html&#38;gt;&#38;lt;head&#38;gt;&#38;lt;title&#38;gt;The Time Now Is:&#38;lt;/title&#38;gt;&#38;lt;/head&#38;gt;&#38;lt;body&#38;gt;&#38;lt;h1&#38;gt;Sat Dec  8 21:26:39 2012&#38;lt;/h1&#38;gt;&#38;lt;/body&#38;gt;&#38;lt;/html&#38;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;The-Times-They-Are-A-Changing&#34;&gt;The Times They Are A Changing&lt;/h2&gt;

&lt;p&gt;So we&#38;#39;re returning multiple representations, and that&#38;#39;s great but what if we want to alter the resource? Let&#38;#39;s let ourselves change the timezone. We&#38;#39;ll need to &lt;code&gt;use POSX qw(tzset)&lt;/code&gt; and add some methods.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;POSIX&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw(tzset)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;allowed_methods&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw[ GET POST ]&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;process_post&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;JSON::XS&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$ENV&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;TZ&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;tzset&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Changing the &lt;code&gt;allowed_methods&lt;/code&gt; lets &lt;code&gt;Web::Machine&lt;/code&gt; know we are expecting POST requests as well as GET requests to this resource. Then when we process the post we simply set the appropriate value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v -X POST http://0:5000 -H &#38;#39;Content-Type: application/json&#38;#39; -d &#38;#39;{&#38;quot;timezone&#38;quot;:&#38;quot;America/Los_Angeles&#38;quot;}&#38;#39;

    * About to connect() to 0 port 5000 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 0 (127.0.0.1) port 5000 (#0)
    &#38;gt; POST / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: */*
    &#38;gt; Content-Type: application/json
    &#38;gt; Content-Length: 34
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 204 No Content
    &#38;lt; Date: Sun, 09 Dec 2012 02:49:22 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; Vary: Accept
    &#38;lt; Content-Type: application/json
    &#38;lt;
    * Closing connection #0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we check now, we&#38;#39;ll see that the time has changed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000

    * About to connect() to 0 port 5000 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 0 (127.0.0.1) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: */*
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 200 OK
    &#38;lt; Date: Sun, 09 Dec 2012 02:46:56 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; Vary: Accept
    &#38;lt; Content-Length: 35
    &#38;lt; Content-Type: application/json
    &#38;lt;
    * Closing connection #0
    {&#38;quot;time&#38;quot;:&#38;quot;Sun Dec  9 02:46:56 2012&#38;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the previous times were &lt;code&gt;America/New_York&lt;/code&gt; the new times are the correct 3 hours behind.&lt;/p&gt;

&lt;h2 id=&#34;Somethign-Witty-HERE&#34;&gt;[Somethign Witty HERE]&lt;/h2&gt;

&lt;p&gt;In addition to supporting the standard HTTP methods, &lt;code&gt;Web::Machine&lt;/code&gt; helps with much of the rest of the HTTP standard including things like Cache Control headers. To enable most basic cache controls simply provide a couple methods to generate ETag and last modified headers.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Digest::SHA&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw(sha1_hex)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Web::Machine::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw(create_date)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;generate_etag&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;sha1_hex&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;localtime&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;last_modified&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;create_date&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;localtime&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;We import two new modules here. &lt;code&gt;Digest::SHA&lt;/code&gt; helps us just make a unique identifier for our resource. &lt;code&gt;Web::Machine::Util&lt;/code&gt; helps us create the appropriate date object that &lt;code&gt;Web::Machine&lt;/code&gt; is expecting.&lt;/p&gt;

&lt;p&gt;If we run our client against this now we&#38;#39;ll see the new cache control headers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000

    * About to connect() to 0 port 5000 (#0)
    *   Trying 0.0.0.0... connected
    * Connected to 0 (0.0.0.0) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: */*
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 200 OK
    &#38;lt; Date: Sun, 09 Dec 2012 14:50:21 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; ETag: &#38;quot;fa4c7582066e3b42fffd346cfba9714ea66cd645&#38;quot;
    &#38;lt; Vary: Accept
    &#38;lt; Content-Length: 35
    &#38;lt; Content-Type: application/json
    &#38;lt; Last-Modified: Sun, 09 Dec 2012 14:50:21 GMT
    &#38;lt;
    * Closing connection #0
    {&#38;quot;time&#38;quot;:&#38;quot;Sun Dec  9 09:50:21 2012&#38;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we make a request for a resource that should be cached, we get the right response code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -v http://0:5000 -H&#38;#39;If-Modified-Since: Sun, 09, Dec 2012 14:55:21 GMT&#38;#39;

    * About to connect() to 0 port 5000 (#0)
    *   Trying 0.0.0.0... connected
    * Connected to 0 (0.0.0.0) port 5000 (#0)
    &#38;gt; GET / HTTP/1.1
    &#38;gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
    &#38;gt; Host: 0:5000
    &#38;gt; Accept: */*
    &#38;gt; If-Modified-Since: Sun, 09, Dec 2012 14:55:21 GMT
    &#38;gt;
    * HTTP 1.0, assume close after body
    &#38;lt; HTTP/1.0 304 Not Modified
    &#38;lt; Date: Sun, 09 Dec 2012 14:55:11 GMT
    &#38;lt; Server: HTTP::Server::PSGI
    &#38;lt; ETag: &#38;quot;f6da728260ea1563bd14ce999f0246a4817f6fee&#38;quot;
    &#38;lt; Vary: Accept
    &#38;lt; Last-Modified: Sun, 09 Dec 2012 14:55:11 GMT
    &#38;lt;
    * Closing connection #0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to cache controls, &lt;code&gt;Web::Machine&lt;/code&gt; provides methods for authentication, request validation, URI validation, charset and encoding variation, and most of the rest of the HTTP spec.&lt;/p&gt;

&lt;h2 id=&#34;The-Downsides&#34;&gt;The Downsides&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Web::Machine&lt;/code&gt; is pretty bare bones. It leaves a lot of opinions beyond HTTP up to the author. This is considered a bonus because these opinions are very much influenced heavily by the environment your application will be deployed in. If you want a framework that provides more pre-built wheels you may want to look at &lt;a href=&#34;http://github.com/Tamarou/magpie&#34;&gt;Magpie&lt;/a&gt; which is a framework based upon the same principles as &lt;code&gt;Web::Machine&lt;/code&gt; but takes a very different approach for it&#38;#39;s implementation.&lt;/p&gt;

&lt;p&gt;One of the principles of REST is that hypertext is the engine of application state. Because &lt;code&gt;Web::Machine&lt;/code&gt; has no opinions on templating, or really representation generation at all, it has no tools for building Hypermedia Documents. I highly recomend looking at the &lt;a href=&#34;https://metacpan.org/module/stateless.co#hal_specification.html&#34;&gt;Hypermedia Application Language&lt;/a&gt; (HAL) specification for structuring hypermedia documents. It describes serializations in both JSON and XML depending on how old school you want to go.&lt;/p&gt;

&lt;p&gt;Currently &lt;code&gt;Web::Machine&lt;/code&gt; also doesn&#38;#39;t handle an asynchronous environment. To be honest HTTP really doesn&#38;#39;t have an asynchronous mode. The closest HTTP has is multi-part responses which are uni-directional streams. An example of this is the Twitter streaming API. There has been talk about adding support for this to &lt;code&gt;Web::Machine&lt;/code&gt; but if you&#38;#39;re looking for this, or something like Websockets right now, &lt;code&gt;Web::Machine&lt;/code&gt; isn&#38;#39;t the right choice.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/release/Web-Machine&#34;&gt;Web::Machine&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/stateless.co#hal_specification.html&#34;&gt;Hypermedia Application Language&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-24T00:00:00Z</updated><category term="Perl"/><author><name>Chris Prather</name></author></entry><entry><title>Give and Receive the Right Number of Gifts</title><link href="http://perladvent.org/2012/2012-12-23.html"/><id>http://perladvent.org/2012/2012-12-23.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h3 id=&#34;Making-a-List&#34;&gt;Making a List&lt;/h3&gt;

&lt;p&gt;Santa is already hard at work preparing for this year&#38;#39;s Christmas. Little boys and girls across the world are sending him their Christmas lists, which look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Shawn.txt:
      3 wooden toys
      1 dog clock
      1 hobby horse
      2 glider planes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Santa naturally uses Perl to parse this list, as he has been these last 25 Christmases. Santa&#38;#39;s Perl script produces the work orders that his elves use to make all those toys.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;5.16.0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;autodie&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$kid_name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$toy_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$handle&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$kid_name.txt&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;readline&#34;&gt;&#38;lt;$handle&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^(\d+) (.+)/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$kid_name would like $gift ($quantity).&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$toy_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Dearest Elf, please make $toy_count gifts for $kid_name.&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Santa&#38;#39;s script simply looks at each line in the child&#38;#39;s Christmas list and keeps a tally of how many gifts in total they would like. Here&#38;#39;s what Santa sends to his elves on my behalf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Shawn would like wooden toys (3).
  Shawn would like dog clock (1).
  Shawn would like hobby horse (1).
  Shawn would like glider planes (2).
  Dearest Elf, please make 7 gifts for Shawn.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All is well and good in Santa&#38;#39;s Workshop!&lt;/p&gt;

&lt;h3 id=&#34;JavaScript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;In his copious free time, Santa has been learning this year&#38;#39;s hot new thing, node.js. After all, Santa has his future to think about. If the giving-billions-of-presents-to-kids-every-year racket doesn&#38;#39;t work out, he knows that he can fall back on his hobby, programming. But Santa knows software engineering jobs generally demand fluency in multiple languages, so to get some practical experience, he&#38;#39;ll use node.js to process these Christmas lists. Since Perl is so good at text parsing, Santa will continue using that to process the incoming Christmas lists. But he wants to port the work order builder to JavaScript. And of course, Santa knows to use JSON to share data between the two environments.&lt;/p&gt;

&lt;p&gt;First, he changes the Perl script to emit JSON instead of text:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;5.16.0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;autodie&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$kid_name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@xmas_list&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$handle&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$kid_name.txt&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;readline&#34;&gt;&#38;lt;$handle&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^(\d+) (.+)/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@xmas_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;gift&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;quantity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;to_json&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;kid_name&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$kid_name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;xmas_list&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@xmas_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now that the Perl script is producing JSON, Santa is ready to write the node code to consume the Christmas list. He structured the JavaScript to register callbacks for interesting events: every time there&#38;#39;s new data on &lt;code&gt;STDIN&lt;/code&gt;, it is concatenated onto the &lt;code&gt;json&lt;/code&gt; variable. Then when &lt;code&gt;STDIN&lt;/code&gt; is closed, the full JSON is consumed and examined to print out the work order.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;#!/usr/bin/env node&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;var&lt;/span&gt; json = &lt;span class=&#34;synConstant&#34;&gt;&#39;&#39;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;process.stdin.resume();&lt;br /&gt;&lt;br /&gt;process.stdin.on(&lt;span class=&#34;synConstant&#34;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;function&lt;/span&gt;(chunk) &lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt; json += chunk &lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;process.stdin.on(&lt;span class=&#34;synConstant&#34;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&#34;synIdentifier&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;var&lt;/span&gt; input     = JSON.parse(json),&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;kid_name  = input.kid_name,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;xmas_list = input.xmas_list,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;toy_count = 0;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;xmas_list.forEach(&lt;span class=&#34;synIdentifier&#34;&gt;function&lt;/span&gt; (item) &lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;console.log(kid_name + &lt;span class=&#34;synConstant&#34;&gt;&#38;quot; would like &#38;quot;&lt;/span&gt; + item.gift + &lt;span class=&#34;synConstant&#34;&gt;&#38;quot; (&#38;quot;&lt;/span&gt; + item.quantity + &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;).&#38;quot;&lt;/span&gt;);&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;toy_count += item.quantity;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;console.log(&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Dearest Elf, please make &#38;quot;&lt;/span&gt; + toy_count + &lt;span class=&#34;synConstant&#34;&gt;&#38;quot; gifts for &#38;quot;&lt;/span&gt; + kid_name + &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;.&#38;quot;&lt;/span&gt;);&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;);&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Santa fires off these two scripts and examines the first work order that comes out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Shawn would like wooden toys (3).
    Shawn would like dog clock (1).
    Shawn would like hobby horse (1).
    Shawn would like glider planes (2).
    Dearest Elf, please make 03112 gifts for Shawn.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no! 3,112 gifts is way too many for one kid! Santa scratches his beard and tries to figure out where things went wrong. He reads the JavaScript again and again, but it all looks right. He reads the Perl again and again, but that looks right too. And where did that zero come from anyway? Elves are certainly eccentric but even they prefer decimal, not octal, numbers.&lt;/p&gt;

&lt;p&gt;Do you, beloved reader, see the problem?&lt;/p&gt;

&lt;h3 id=&#34;Data-Interchange&#34;&gt;Data Interchange&lt;/h3&gt;

&lt;p&gt;This problem is driving Santa batty, so he starts shifting a little bit more blame than is deserved.&lt;/p&gt;

&lt;p&gt;&#38;quot;&lt;i&gt;Does node.js not even get &lt;b&gt;addition&lt;/b&gt; right?&lt;/i&gt;&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;&lt;i&gt;Is this abominable computer playing tricks on me?&lt;/i&gt;&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;&lt;i&gt;That Larry fella? &lt;b&gt;Coal!!&lt;/b&gt;&lt;/i&gt;&#38;quot;&lt;/p&gt;

&lt;p&gt;Certainly you&#38;#39;ve felt the same kind of debugging paranoia before, too. Often a divide and conquer approach will get your foot in the door of these kinds of problems. If Santa can decisively conclude that the bug is in either the Perl or the JavaScript, that halves the problem he is flailing at.&lt;/p&gt;

&lt;p&gt;We can figure out which language the bug is in by closely examining the JSON passed from Perl to JavaScript. If the JSON is correct, then the bug can&#38;#39;t possibly be in Perl. If the JSON is wrong, then the bug is obviously in Perl. So what does that JSON look like?&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;xmas_list&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synIdentifier&#34;&gt;[&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;wooden toys&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;3&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;dog clock&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;1&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;hobby horse&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;1&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;glider planes&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;2&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;]&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;kids_name&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Shawn&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;That JSON is wrong! Why is each &lt;code&gt;quantity&lt;/code&gt; a string? That makes no sense. And since the JSON is wrong, there must be a bug in the Perl program.&lt;/p&gt;

&lt;p&gt;Each quantity is a string ultimately because Perl is very forgiving. If you write &lt;code&gt;$str1 + $str2&lt;/code&gt;, Perl knows that you meant &lt;i&gt;addition&lt;/i&gt; and not &lt;i&gt;concatenation&lt;/i&gt; because you chose the &lt;code&gt;+&lt;/code&gt; operator instead of the &lt;code&gt;.&lt;/code&gt; operator. Concatenation doesn&#38;#39;t even cross Perl&#38;#39;s mind! So Perl dutifully complies with the &lt;code&gt;+&lt;/code&gt; operator by numifying &lt;code&gt;$str1&lt;/code&gt; and &lt;code&gt;$str2&lt;/code&gt; then adding whatever it pulled out of those two strings.&lt;/p&gt;

&lt;p&gt;In Santa&#38;#39;s original completely-Perl program, and indeed in most programs, this behavior is very helpful. When Perl deconstructed each line of the Christmas list with a regular expression, it pulled out two substrings: quantity and name. But when Santa summed up the number of gifts, Perl numified each quantity. We didn&#38;#39;t need to tell Perl to do that beyond just using addition. This correctly produced the total 7.&lt;/p&gt;

&lt;p&gt;However when Santa changed his program to start emitting JSON, there was no more addition to hint to Perl that quantity is actually numeric. Instead, when &lt;a href=&#34;https://metacpan.org/module/JSON&#34;&gt;JSON&lt;/a&gt; came to serialize each quantity, it saw that Perl currently thought the value was a string not a number (since it was produced with a regular expression capture group). So &lt;a href=&#34;https://metacpan.org/module/JSON&#34;&gt;JSON&lt;/a&gt; produced the strings &lt;code&gt;&#38;quot;3&#38;quot;&lt;/code&gt;, &lt;code&gt;&#38;quot;1&#38;quot;&lt;/code&gt;, &lt;code&gt;&#38;quot;1&#38;quot;&lt;/code&gt;, and &lt;code&gt;&#38;quot;2&#38;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is problematic because in many other languages that aren&#38;#39;t Perl, such as JavaScript, what the &lt;code&gt;+&lt;/code&gt; operator will do depends on the types of its operands. &lt;code&gt;number + number&lt;/code&gt; means addition and &lt;code&gt;string + string&lt;/code&gt; means concatenation. It&#38;#39;s not better or worse than how Perl does it; just different. But it means that when the JSON contained strings for quantity, node.js chose &lt;i&gt;concatenation&lt;/i&gt;, not &lt;i&gt;addition&lt;/i&gt;, during each iteration of &lt;code&gt;toy_count += item.quantity;&lt;/code&gt;. This is how Santa accidentally ordered &lt;code&gt;&#38;quot;03112&#38;quot;&lt;/code&gt; gifts for me (recall that &lt;code&gt;toy_count&lt;/code&gt; was initialized to &lt;code&gt;0&lt;/code&gt;, so that&#38;#39;s where that leading &lt;code&gt;0&lt;/code&gt; came from).&lt;/p&gt;

&lt;h3 id=&#34;Numification&#34;&gt;Numification&lt;/h3&gt;

&lt;p&gt;Now we understand the bug. But what is Santa to do about it? It&#38;#39;s already December 23rd, he doesn&#38;#39;t have much time here!&lt;/p&gt;

&lt;p&gt;The fix is to &lt;i&gt;force&lt;/i&gt; Perl to treat the quantity value as numeric. You can do this in several different ways: adding zero, multiplying by one, using &lt;code&gt;int(...)&lt;/code&gt;, and so on. These operations can only produce numbers, which lets Perl annotate such values as being numeric. That way when &lt;a href=&#34;https://metacpan.org/module/JSON&#34;&gt;JSON&lt;/a&gt; comes to serialize quantity, it sees that the value is a number not a string, so it leaves off the quotation marks. Then when node.js parses this JSON, it treats each quantity as a number, not as a string, so &lt;code&gt;+&lt;/code&gt; means addition not concatenation, so we should end up with the correct sum.&lt;/p&gt;

&lt;p&gt;Let&#38;#39;s add zero to &lt;code&gt;$quantity&lt;/code&gt; to produce a number.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@xmas_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;gift&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;quantity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;With this change, the JSON looks like this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;xmas_list&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synIdentifier&#34;&gt;[&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;wooden toys&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : 3&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;dog clock&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : 1&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;hobby horse&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : 1&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;gift&#38;quot;&lt;/span&gt;     : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;glider planes&#38;quot;&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;quantity&#38;quot;&lt;/span&gt; : 2&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;]&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;&#38;quot;kids_name&#38;quot;&lt;/span&gt; : &lt;span class=&#34;synConstant&#34;&gt;&#38;quot;Shawn&#38;quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synIdentifier&#34;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And the toy order looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Shawn would like wooden toys (3).
  Shawn would like dog clock (1).
  Shawn would like hobby horse (1).
  Shawn would like glider planes (2).
  In summary, Shawn would like 7 gifts.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Problem solved!&lt;/p&gt;

&lt;h3 id=&#34;JSON::Types&#34;&gt;&lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Santa is very happy that orders are now flowing correctly. But he is concerned about that &lt;code&gt;+ 0&lt;/code&gt;. It&#38;#39;s not particularly obvious what the &lt;code&gt;+ 0&lt;/code&gt; is doing, because, practically speaking, when would you ever want to add zero to something? Next year when it comes time to incorporate 2013&#38;#39;s cool tech, Santa may have forgotten the reason for the &lt;code&gt;+ 0&lt;/code&gt; and outright delete it, or simply drop it when he next refactors the code. He could leave a comment:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;synIdentifier&#34;&gt;@xmas_list&lt;/span&gt;, {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;gift&lt;/span&gt;     =&#38;gt; &lt;span class=&#34;synIdentifier&#34;&gt;$gift&lt;/span&gt;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synConstant&#34;&gt;quantity&lt;/span&gt; =&#38;gt; &lt;span class=&#34;synIdentifier&#34;&gt;$quantity&lt;/span&gt; + &lt;span class=&#34;synConstant&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;synComment&#34;&gt;# treat quantity as a number&lt;/span&gt;&lt;br /&gt;};&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;But he&#38;#39;s understandably still concerned about potential maintenance problems because, let&#38;#39;s face it, &lt;code&gt;+ 0&lt;/code&gt; is fundamentally strange.&lt;/p&gt;

&lt;p&gt;Luckily for Santa, there is a new module called &lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt; that makes fixing this and other similar problems a treat. &lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt; provides a subroutine called &lt;code&gt;number&lt;/code&gt; which encapsulates the messy bit of convincing Perl to produce a number.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@xmas_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;gift&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;quantity&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;JSON::Types::number&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$quantity&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The best part is that just by putting &lt;code&gt;JSON::Types::number&lt;/code&gt; into the source code, it&#38;#39;s a lot more obvious what is really going on. Even a thousand years from now, Santa will be able to understand what that piece of code means and why it must happen. After all, &lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt; has easily-findable documentation explaining the problem. It&#38;#39;s hard to document &lt;code&gt;+ 0&lt;/code&gt; in general, and it&#38;#39;s hard to search for too. Just seeing the word &#38;quot;JSON&#38;quot; in that line of code might even be enough to jog Santa&#38;#39;s memory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt; also provides &lt;code&gt;string&lt;/code&gt; for turning numbers into strings. You could of course use &lt;code&gt;&#38;quot;$number&#38;quot;&lt;/code&gt; to force a string into a number, but that has the same kinds of problems as &lt;code&gt;+ 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt; also provides a &lt;code&gt;bool&lt;/code&gt; subroutine for producing the constants &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; that JSON has. In Perl, we get by just fine with using &lt;code&gt;undef&lt;/code&gt; or the empty string for &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; for true, but in other languages, that simply will not stand. &lt;code&gt;bool($value)&lt;/code&gt; will use the same kind of logic as Perl&#38;#39;s &lt;code&gt;if&lt;/code&gt; to decide whether &lt;code&gt;$value&lt;/code&gt; should produce &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Without &lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt;, you&#38;#39;d have to do something silly like &lt;code&gt;$value ? JSON::true : JSON::false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, this year, be sure you&#38;#39;re using addition, not concatenation, to count how many gifts your loved ones get!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/JSON&#34;&gt;JSON&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/JSON::Types&#34;&gt;JSON::Types&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-23T00:00:00Z</updated><category term="Perl"/><author><name>Shawn M Moore</name></author></entry><entry><title>Generate static web sites using your favorite Perl framework</title><link href="http://perladvent.org/2012/2012-12-22.html"/><id>http://perladvent.org/2012/2012-12-22.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;The-best-of-two-worlds&#34;&gt;The best of two worlds&lt;/h2&gt;

&lt;h3 id=&#34;Static-web-sites&#34;&gt;Static web sites&lt;/h3&gt;

&lt;p&gt;Have you noticed the recent trend of static blogging?&lt;/p&gt;

&lt;p&gt;The idea behind static blogging is to use a tool to &lt;i&gt;generate&lt;/i&gt; the HTML pages that constitute the blog from a set of simple text files, and to publish these generated pages using a basic web server.&lt;/p&gt;

&lt;p&gt;Some would argue that a blog without comments is not really a blog. And how do you comment without &lt;code&gt;POST&lt;/code&gt;? One way would be to delegate the &lt;code&gt;POST&lt;/code&gt;ing to someone else (like &lt;a href=&#34;http://disqus.com/&#34;&gt;Disqus&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Also, static web sites don&#38;#39;t have to be frozen. Nothing prevents you from generating the site content regularly (especially if it depends on an external source) or from hooking it to your VCS repository, so that every update to the source triggers a regeneration.&lt;/p&gt;

&lt;p&gt;Going back to static web sites, here are a few reasons why people like them:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;Speed:&lt;/p&gt;

&lt;p&gt;It would be really hard to beat a webserver serving a static file from disk.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security:&lt;/p&gt;

&lt;p&gt;No user input means no SQL injection. If no code is run to produce the response, then no bugs can interfere in the process.&lt;/p&gt;

&lt;p&gt;Of course, you&#38;#39;re still vulnerable to your webserver&#38;#39;s own security issues when it serves static files, but that should be a pretty limited set.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simplicity:&lt;/p&gt;

&lt;p&gt;A static web site is a bunch of files. You can commit them in a VCS and push them to their final destination, or you can use FTP. It&#38;#39;s the easiest deployment procedure ever.&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Economy:&lt;/p&gt;

&lt;p&gt;Generate once, request any time!&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Static blogging tools like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;http://pypi.python.org/pypi/pelican&#34;&gt;Pelican&lt;/a&gt;, &lt;a href=&#34;http://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt; keep popping up, and new ones are invented almost daily.&lt;/p&gt;

&lt;p&gt;(I have myself been using &lt;a href=&#34;http://template-toolkit.org/docs/tools/ttree.html&#34;&gt;ttree&lt;/a&gt; for years, but writing code using &lt;a href=&#34;http://template-toolkit.org/&#34;&gt;Template Toolkit&lt;/a&gt;&#38;#39;s DSL can be limiting.)&lt;/p&gt;

&lt;p&gt;The setup is always the same: take a bunch of files in &lt;i&gt;some format&lt;/i&gt; (usually &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;, &lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;reStructuredText&lt;/a&gt; or &lt;a href=&#34;http://www.txstyle.org/&#34;&gt;Textile&lt;/a&gt;), plus some configuration, and run the tool. The problem with that is always the same: the model fits the original author&#38;#39;s needs, and you have to follow &lt;i&gt;their&lt;/i&gt; rules. Personalisation not included.&lt;/p&gt;

&lt;h3 id=&#34;Web-frameworks&#34;&gt;Web frameworks&lt;/h3&gt;

&lt;p&gt;Perl has plenty of awesome web frameworks, such as &lt;a href=&#34;http://www.catalystframework.org/&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;http://www.perldancer.org/&#34;&gt;Dancer&lt;/a&gt;, &lt;a href=&#34;http://mojolicio.us/&#34;&gt;Mojolicious&lt;/a&gt;, and many others, to let you write your web application the way you want. Each has its own set of advantages and disadvantages, but that is not the point of this article.&lt;/p&gt;

&lt;p&gt;The point is that using those to run a blog or the framework&#38;#39;s marketing^Whome page may seem wasteful, as there&#38;#39;s probably little need to regenerate a page for each request, no matter if the content has changed or not.&lt;/p&gt;

&lt;h3 id=&#34;Static-web-sites-made-with-web-frameworks&#34;&gt;Static web sites made with web frameworks&lt;/h3&gt;

&lt;p&gt;PSGI is an interface between web servers and applications written in Perl. The Plack implementation of PSGI is supported by most Perl web frameworks. It&#38;#39;s also possible to write your own application (a PSGI application is just a subroutine) and connect it to any supported web server &#38;mdash; and most web servers are supported.&lt;/p&gt;

&lt;p&gt;After having tried to write my own static site generator, and having failed at making it as flexible as I would have liked (which in retrospect would probably have made it a web framework in itself), it seemed wiser to start building a site with one of those nice web frameworks and to use Plack as my entry point to get the to the content.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/wallflower&#34;&gt;wallflower&lt;/a&gt; is a command-line tool that takes a PSGI application, and uses Plack to access to the content and save it to local files, ready to be uploaded to your static web server.&lt;/p&gt;

&lt;p&gt;After obtaining the coderef for your application, it repeatedly creates the PSGI environment for the URL you want to process and runs your app on it (using &lt;code&gt;Plack::Util::run_app&lt;/code&gt;), saving the response content to a local file. If the response content type is &lt;code&gt;text/html&lt;/code&gt; or &lt;code&gt;text/css&lt;/code&gt;, it will automatically look for embedded links and add them to its queue, thus enabling auto-discovery of the entire web site.&lt;/p&gt;

&lt;p&gt;The point of &lt;a href=&#34;https://metacpan.org/module/Wallflower&#34;&gt;Wallflower&lt;/a&gt; is to let you write any static website using all the power of your favorite web framework. It also follows links inside your Plack application, so if your site is properly organized, you only need to point it to &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;Blogging-statically-with-your-favorite-framework&#34;&gt;Blogging statically with your favorite framework&lt;/h3&gt;

&lt;p&gt;The obvious example for this would be to write a blog. I&#38;#39;ll use Dancer, because it&#38;#39;s the only web framework I know, but keep in mind that this will work with any PSGI-compliant framework. You could actually write your own PSGI application, if no existing framework suited you.&lt;/p&gt;

&lt;p&gt;Since our target is a &lt;i&gt;static&lt;/i&gt; web site, the main thing to keep in mind is that the target web server will determine the content type by looking at the extension, each all of our URLs &lt;b&gt;must&lt;/b&gt; have an extension.&lt;/p&gt;

&lt;p&gt;The sources for our basic blog will be a set of text files in the &lt;i&gt;public/&lt;/i&gt; subdirectory, with the content written in Markdown. URL will simply be mapped to those files.&lt;/p&gt;

&lt;p&gt;So, we start by writing a route to handle all URL ending with &lt;i&gt;.html&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;ShyBlog&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;:syntax&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Text::Markdown&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( file )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$m&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Text::Markdown&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;regexp&#34;&gt;qr{/(.*)\.html}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;splat&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$text&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;setting&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$file.txt&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;slurp&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;blog&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$m&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;markdown&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$text&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Since we put our blog entries in the &lt;i&gt;public/&lt;/i&gt; directory, Dancer will automatically serve the source when we end the URL in &lt;i&gt;.txt&lt;/i&gt;! And we didn&#38;#39;t even need to write a route for that!&lt;/p&gt;

&lt;p&gt;Now, we want to get any further than a single blog post, to showing a main page with the latest post, some side bars on every page pointing to the archives by month, and maybe a JSON file with all our tags for making a nice tag cloud in JavaScript, we have a bit of a problem: we need to know about all our blog&#38;#39;s posts when generating any individual one.&lt;/p&gt;

&lt;p&gt;Remember that our PSGI application is ultimately a subroutine that will be called repeatedly by wallflower, so we just have to make the needed data available to the subroutine by building the list of all posts, once and for all, during the initialisation phase of the application.&lt;/p&gt;

&lt;p&gt;A simple call to &lt;a href=&#34;https://metacpan.org/module/File::Find&#34;&gt;File::Find&lt;/a&gt; will help us generate the list of all posts, from which we can create a data structure. In this example it&#38;#39;s an array:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::Find&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@entries&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # we only care about blog entries&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;match&#34;&gt;/\.txt$/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # get a Path::Class::File for it&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$File::Find::name&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;openr&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # parse a simple header using the kite secret operator&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;word&#34;&gt;chomp&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$date&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$tags&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;~~&#38;lt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&#38;gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;~~&#38;lt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&#38;gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;~~&#38;lt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # update the structure will all relevant information&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$source&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$File::Find::name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;setting&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$url&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$source&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;substitute&#34;&gt;s/\.txt$/.html;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;push @entries, {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;url    =&#38;gt; &#39;/&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39; .&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;title  =&#38;gt; $title,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;date   =&#38;gt; $date,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;tags   =&#38;gt; [ split /\s*,\s*/, $tags ],&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;source =&#38;gt; &#38;quot;/$year/$month/$_.txt&#38;quot;,&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;};&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;setting( &#39;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39; )&lt;br /&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Actually, for simplicity, and integration with the framework, it would make sense to create a temporary SQLite database, with a few tables for blog entries meta-information, tags, etc. The code in the templates and some special routes (like the main page) can then use that database to fetch all the information they need.&lt;/p&gt;

&lt;p&gt;Generating the website is now simply a matter of running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ wallflower -a bin/app.pl -d /path/to/the/output/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;wallflower&lt;/i&gt; will start browsing the application from &lt;code&gt;/&lt;/code&gt; and will follow all links (from HTML and CSS files) to generate your site content.&lt;/p&gt;

&lt;p&gt;You can then copy the content of &lt;i&gt;output/&lt;/i&gt; to the proper location on the target web server, and you&#38;#39;re done!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/App::Wallflower&#34;&gt;App::Wallflower&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/wallflower&#34;&gt;wallflower&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dancer&#34;&gt;Dancer&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlsecret#Kite&#34;&gt;~~&#38;lt;&#38;gt;&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-22T00:00:00Z</updated><category term="Perl"/><author><name>Philippe Bruhat</name></author></entry><entry><title>Set-based DBIx::Class</title><link href="http://perladvent.org/2012/2012-12-21.html"/><id>http://perladvent.org/2012/2012-12-21.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;I&#38;#39;ve been using &lt;a href=&#34;https://metacpan.org/module/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; for a few years, and I&#38;#39;ve been part of the development team for just a little bit less. Three years ago I wrote a &lt;a href=&#34;http://www.catalystframework.org/calendar/2009/20&#34;&gt;Catalyst Advent article&lt;/a&gt; about the five &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helpers&#34;&gt;DBIx::Class::Helpers&lt;/a&gt;, which have since ballooned to twenty-four. I&#38;#39;ll be mentioning a few helpers in this post, but the main thing I want to describe is a way of using DBIx::Class that results in efficient applications as well as reduced code duplication.&lt;/p&gt;

&lt;p&gt;(Don&#38;#39;t know anything about DBIx::Class? Want a refresher before diving in more deeply? Maybe watch &lt;a href=&#34;https://www.youtube.com/watch?v=Vm_NlfHNVvg&#34;&gt;my presentation&lt;/a&gt; on it, or, if you don&#38;#39;t like my face, try &lt;a href=&#34;http://www.youtube.com/watch?v=N-tbMPyNlM8&#34;&gt;this one&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The thesis of this article is that &lt;b&gt;when you write code to act on things at the set level, you can often leverage the database&#38;#39;s own optimizations&lt;/b&gt; and thus produce faster code at a lower level.&lt;/p&gt;

&lt;h2 id=&#34;Set-Based-DBIx::Class&#34;&gt;Set Based DBIx::Class&lt;/h2&gt;

&lt;p&gt;The most important feature of DBIx::Class is not the fact that it saves you time by allowing you to sidestep database incompatibilities. It&#38;#39;s not that you never have to learn the exact way to paginate correctly with SQL Server. It isn&#38;#39;t even that you won&#38;#39;t have to write DDL for some of the most popular databases. Of course DBIx::Class &lt;b&gt;does&lt;/b&gt; do these things. Any ORM worth it&#38;#39;s weight in salt should.&lt;/p&gt;

&lt;h3 id=&#34;Chaining&#34;&gt;Chaining&lt;/h3&gt;

&lt;p&gt;The most important feature of DBIx::Class is the &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::ResultSet&#34;&gt;ResultSet&lt;/a&gt;. I&#38;#39;m not an expert on ORMs, but I&#38;#39;ve yet to hear of another ORM which has an immutable[&#38;dagger;] query representation framework. The first thing you &lt;b&gt;must&lt;/b&gt; understand to achieve DBIx::Class mastery is ResultSet chaining. This is basic but critical.&lt;/p&gt;

&lt;p&gt;The basic pattern of chaining is that you can do the following and not hit the database:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;symbol&#34;&gt;$resultset&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;frew&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;software engineer&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;What the above implies is that you can add methods to your resultsets like the following:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;search_by_name&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;current_source_alias&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;.name&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;is_software_engineer&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;current_source_alias&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;.job&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;software engineer&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And then the query would become merely&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;symbol&#34;&gt;$resultset&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search_by_name&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;frew&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;is_software_engineer&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;(microtip: use &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::ResultSet::Me&#34;&gt;DBIx::Class::Helper::ResultSet::Me&lt;/a&gt; to make defining searches as above less painful.)&lt;/p&gt;

&lt;h3 id=&#34;Relationship-Traversal&#34;&gt;Relationship Traversal&lt;/h3&gt;

&lt;p&gt;The next thing you need to know is relationship traversal. This can happen two different ways, and to get the most code reuse out of DBIx::Class you&#38;#39;ll need to be able to reach for both when the time arrises.&lt;/p&gt;

&lt;p&gt;The first is the more obvious one:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;job.name&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;goblin king&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;join&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;job&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The above finds person rows that have the job &#38;quot;&lt;a href=&#34;https://www.google.com/search?tbm=isch&#38;amp;q=david+bowie+jareth&#34;&gt;goblin king&lt;/a&gt;.&#38;quot;&lt;/p&gt;

&lt;p&gt;The alternative to use &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::ResultSet#related_resultset&#34;&gt;&#38;quot;related_resultset&#38;quot; in DBIx::Class::ResultSet&lt;/a&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;symbol&#34;&gt;$job_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search_by_name&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;goblin_king&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;related_resultset&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;person&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The above generates the same query, but allows you to use methods that are defined on the job resultset.&lt;/p&gt;

&lt;h3 id=&#34;Subqueries&#34;&gt;Subqueries&lt;/h3&gt;

&lt;p&gt;Subqueries are less important for code reuse and more important in avoiding incredibly inefficient database patterns. Basically, they allow the database to do more on its own. Without them, you&#38;#39;ll end up asking the database for data, then you&#38;#39;ll send that data right back to the database as part of your next query. It&#38;#39;s not only pointless network overhead but also two queries.&lt;/p&gt;

&lt;p&gt;Here&#38;#39;s an example of what not to do in &lt;code&gt;DBIx::Class&lt;/code&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@failed_tests&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$tests&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;pass&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@not_failed_tests&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$tests&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;-not_in&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@failed_tests&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# XXX: DON&#39;T DO THIS&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you got enough failed tests back, this would probably just error. &lt;b&gt;Just Say No&lt;/b&gt; to inefficient database queries:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$failed_tests&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$tests&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;pass&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get_column&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_query&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@not_failed_tests&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$tests&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;-not_in&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$failed_tests&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is much more efficient than before, as it&#38;#39;s just a single query and lets the database do what it does best and gives you what you exactly want.&lt;/p&gt;

&lt;h3 id=&#34;Christmas&#34;&gt;Christmas!&lt;/h3&gt;

&lt;p&gt;Ok so now you know how to reuse searches as much as is currently possible. You understand the basics of subqueries in &lt;code&gt;DBIx::Class&lt;/code&gt; and how they can save you time. My guess is that you actually already knew that. &#38;quot;This wasn&#38;#39;t any kind of ninja secret, fREW! You lied to me!&#38;quot; I&#38;#39;m sorry, but now we&#38;#39;re getting to the real meat.&lt;/p&gt;

&lt;h3 id=&#34;Correlated-Subqueries&#34;&gt;Correlated Subqueries&lt;/h3&gt;

&lt;p&gt;One of the common, albeit expensive, usage patterns I&#38;#39;ve seen in &lt;code&gt;DBIx::Class&lt;/code&gt; is using &lt;code&gt;N + 1&lt;/code&gt; queries to get related counts. The idea is that you do something like the following:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;cast&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_hash&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;friends&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# XXX: BAD CODE, DON&#39;T COPY PASTE&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Note that the &lt;code&gt;$_-&#38;gt;friends-&#38;gt;count&lt;/code&gt; is a query to get the count of friends. The alternative is to use correlated subqueries. Correlated subqueries are hard to understand and even harder to explain. The gist is that, just like &lt;a href=&#34;#Subqueries&#34;&gt;before&lt;/a&gt;, we are just using a subquery to avoid passing data to the database for no good reason. This time we are just going to do it for each row in the database. Here is how one would do the above query, except as promised, with only a single hit to the database:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;cast&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_hash&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get_column&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend_count&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;core&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;+columns&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$friend_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;friend.person_id&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;-ident&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;current_source_alias&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;.id&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;friend&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;count_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_query&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;There are only two new things above. The first is &lt;code&gt;-ident&lt;/code&gt;. All &lt;code&gt;-ident&lt;/code&gt; does is tell &lt;code&gt;DBIx::Class&lt;/code&gt; &#38;quot;this is the name of a thing in the database, quote it appropriately.&#38;quot; In the past people would have written &lt;code&gt;-ident&lt;/code&gt; using queries like this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend.person_id&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39; = foo.id&#39;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# don&#39;t do this, it&#39;s silly&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;So if you see something like that in your code base, change it to &lt;code&gt;-ident&lt;/code&gt; as above.&lt;/p&gt;

&lt;p&gt;The next new thing is the &lt;code&gt;alias =&#38;gt; &#38;#39;friend&#38;#39;&lt;/code&gt; directive. This merely ensures that the inner rs has it&#38;#39;s own alias, so that you have something to correlate against. If that doesn&#38;#39;t make sense, just trust me and cargo cult for now.&lt;/p&gt;

&lt;p&gt;This adds a virtual column, which is itself a subquery. The column is, basically, &lt;code&gt;$friend_rs-&#38;gt;search({ &#38;#39;friend.person_id&#38;#39; =&#38;gt; $_-&#38;gt;id })-&#38;gt;count&lt;/code&gt;, except it&#38;#39;s all done in the database. The above is &lt;b&gt;horrible&lt;/b&gt; to recreate every time, so I made a helper: &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::ResultSet::CorrelateRelationship&#34;&gt;DBIx::Class::Helper::ResultSet::CorrelateRelationship&lt;/a&gt;. With the helper the above becomes:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;cast&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_hash&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get_column&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend_count&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;core&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;+columns&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;correlate&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;count_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_query&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id=&#34;ProxyResultSetMethod&#34;&gt;&lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::Row::ProxyResultSetMethod&#34;&gt;::ProxyResultSetMethod&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Correlated Subqueries are nice, especially given that there is a helper to make creating them easier, but it&#38;#39;s still not as nice as we would like it. I made another helper which is the icing on the cake. It encourages more forward-thinking DBIx::Class usage with respect to resultset methods.&lt;/p&gt;

&lt;p&gt;Let&#38;#39;s assume you need friend count very often. You should make the following resultset method in that case:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;with_friend_count&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;core&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;+columns&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;friend_count&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;correlate&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;count_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;as_query&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now you can just do the following to get a resultset with a friend count included:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;symbol&#34;&gt;$person_rs&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;with_friend_count&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;But to access said friend count from a result you&#38;#39;ll still have to use &lt;code&gt;-&#38;gt;get_column(&#38;#39;friend&#38;#39;)&lt;/code&gt;, which is a drag since using &lt;code&gt;get_column&lt;/code&gt; on a &lt;code&gt;DBIx::Class&lt;/code&gt; result is nearly using a private method. That&#38;#39;s where my helper comes in. With &lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::Row::ProxyResultSetMethod&#34;&gt;DBIx::Class::Helper::Row::ProxyResultSetMethod&lt;/a&gt;, you can use the &lt;code&gt;-&#38;gt;with_friend_count&lt;/code&gt; method &lt;b&gt;from&lt;/b&gt; your row methods, and better yet, if you used it when you originally pulled data with the resultset, the result will use the data that it already has! The gist is that you add this to your result class:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;__PACKAGE__&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;load_components&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw( Helper::Row::ProxyResultSetMethod )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;__PACKAGE__&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;proxy_resultset_method&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;friend_count&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;and that adds a &lt;code&gt;friend_count&lt;/code&gt; method on your row objects that will correctly proxy to the resultset or use what it pulled or cache if called more than once!&lt;/p&gt;

&lt;h3 id=&#34;ProxyResultSetUpdate&#34;&gt;&lt;a href=&#34;DBIx:Class::Helper::Row::ProxyResultSetUpdate&#34;&gt;::ProxyResultSetUpdate&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I have one more, small gift for you. Sometimes you want to do something when either your row or resultset is updated. I posit that the best way to do this is to write the method in your resultset and then proxy to the resultset from the row. If you force your API to update through the result you are doing &lt;code&gt;N&lt;/code&gt; updates (one per row), which is inefficient. My helper simply needs to be loaded:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;__PACKAGE__&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;load_components&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw( Helper::Row::ProxyResultSetUpdate )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;and your results will use the update defined in your resultset.&lt;/p&gt;

&lt;h3 id=&#34;Dont-Stop&#34;&gt;Don&#38;#39;t Stop!&lt;/h3&gt;

&lt;p&gt;This isn&#38;#39;t all! DBIx::Class can be very efficient &lt;b&gt;and also&lt;/b&gt; reduce code duplication. Whenever you have something that&#38;#39;s slow or bound to result objects, think about what you could do to leverage your amazing storage layer&#38;#39;s speed (the RDBMS) and whether you can push the code down a layer to be reused more.&lt;/p&gt;

&lt;p&gt;[&#38;dagger;] if it weren&#38;#39;t for the fact that there is an implicit iterator akin to &lt;code&gt;each %foo&lt;/code&gt; it would be 100% immutable. It&#38;#39;s pretty close though!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::ResultSet::Me&#34;&gt;DBIx::Class::Helper::ResultSet::Me&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::ResultSet::CorrelateRelationship&#34;&gt;DBIx::Class::Helper::ResultSet::CorrelateRelationship&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/DBIx::Class::Helper::Row::ProxyResultSetMethod&#34;&gt;DBIx::Class::Helper::Row::ProxyResultSetMethod&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;DBIx:Class::Helper::Row::ProxyResultSetUpdate&#34;&gt;DBIx:Class::Helper::Row::ProxyResultSetUpdate&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-21T00:00:00Z</updated><category term="Perl"/><author><name>Arthur Axel &#34;fREW&#34; Schmidt</name></author></entry><entry><title>Better Testing</title><link href="http://perladvent.org/2012/2012-12-20.html"/><id>http://perladvent.org/2012/2012-12-20.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Moose-is-slow&#34;&gt;Moose is slow!&lt;/h2&gt;

&lt;p&gt;At least when testing. Moose&#38;#39;s compile time speed isn&#38;#39;t typically a problem when running things like web applications, since they only start up once, but tests frequently run many instances of the application in quick succession, and this can add quite a bit of time to the overall runtime of the test suite. This can in fact happen with a lot of different modules - Moose is just the most well known example, but any large module will have a similar effect.&lt;/p&gt;

&lt;p&gt;If you look at what&#38;#39;s actually happening though, all of this extra time is spent doing the same thing. The same code is loaded at the start, and then only after compilation is finished do things start to diverge (to run the actual tests themselves). There&#38;#39;s no reason that the code that runs for &lt;code&gt;use Moose&lt;/code&gt; should need to run multiple times during the test suite, since it always does the same thing, and so a lot of time could be saved by loading modules fewer times.&lt;/p&gt;

&lt;h3 id=&#34;Test::Aggregate&#34;&gt;Test::Aggregate&lt;/h3&gt;

&lt;p&gt;In the past, people have attacked this problem by combining test files into fewer, bigger ones, or by using something like &lt;a href=&#34;https://metacpan.org/module/Test::Aggregate&#34;&gt;Test::Aggregate&lt;/a&gt; to automate this process. This is error-prone, because a lot of times tests can have global effects - installing subs into packages, creating classes, etc. We really do want tests to run in separate environments, to avoid allowing them to interfere with each other.&lt;/p&gt;

&lt;h3 id=&#34;App::ForkProve&#34;&gt;App::ForkProve&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/App::ForkProve&#34;&gt;App::ForkProve&lt;/a&gt; solves this problem. It is a wrapper for &lt;a href=&#34;https://metacpan.org/module/App::Prove&#34;&gt;App::Prove&lt;/a&gt;, which allows you to preload modules, and then instead of running each of the test files via &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt;, it runs them via &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt;. This way, the preloaded modules are already loaded in the current interpreter, and so when the test files are run, the &lt;code&gt;use&lt;/code&gt; statement is just a no-op.&lt;/p&gt;

&lt;p&gt;This actually works remarkably well - the &lt;a href=&#34;https://metacpan.org/module/OX&#34;&gt;OX&lt;/a&gt; test suite takes 30 seconds to run &lt;code&gt;make test&lt;/code&gt; on my laptop, which decreases to 14 seconds under &lt;code&gt;prove -rj5 -l t&lt;/code&gt; (since it runs the tests in parallel on multiple processors), but &lt;code&gt;forkprove -rj5 -l -MOX -MOX::Request -MOX::Response -MOX::RouteBuilder::Code -MOX::RouteBuilder::ControllerAction -MOX::RouteBuilder::HTTPMethod t&lt;/code&gt; runs in just &lt;i&gt;3 seconds&lt;/i&gt;.&lt;/p&gt;

&lt;h3 id=&#34;Tips-and-tricks&#34;&gt;Tips and tricks&lt;/h3&gt;

&lt;p&gt;That command line did get a bit long though, and it&#38;#39;s hard for people who aren&#38;#39;t the developer to know what things are useful to preload. It may be useful to provide a module along with your test suite that does the job of loading all of the useful modules, so you only have to specify a single &lt;code&gt;-M&lt;/code&gt; option. For instance, here is the contents of &lt;code&gt;t/Preload.pm&lt;/code&gt; in the OX repository:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synStatement&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;synType&#34;&gt; t::Preload&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use strict&lt;/span&gt;;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use warnings&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::Request;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::Response;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::RouteBuilder::Code;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::RouteBuilder::ControllerAction;&lt;br /&gt;&lt;span class=&#34;synStatement&#34;&gt;use &lt;/span&gt;OX::RouteBuilder::HTTPMethod;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synConstant&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now, you can just run &lt;code&gt;forkprove -rj5 -l -Mt::Preload t&lt;/code&gt; to get the same effect.&lt;/p&gt;

&lt;p&gt;Another useful trick is that since &lt;code&gt;forkprove&lt;/code&gt; is entirely compatible with &lt;code&gt;prove&lt;/code&gt; except for the &lt;code&gt;-M&lt;/code&gt; option, you can replace &lt;code&gt;prove&lt;/code&gt; with &lt;code&gt;forkprove&lt;/code&gt; entirely, by adding an alias to your shell configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  alias prove=&#38;quot;forkprove&#38;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, prove will continue to work as it always has in the past, but if you specify any &lt;code&gt;-M&lt;/code&gt; options, they will be preloaded.&lt;/p&gt;

&lt;h3 id=&#34;Caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;This isn&#38;#39;t &lt;i&gt;entirely&lt;/i&gt; free, however. One obvious place where this would cause problems is in test files which test to make sure certain modules &lt;i&gt;don&#38;#39;t&lt;/i&gt; get loaded in certain situations. If you preload those modules, those tests will start failing.&lt;/p&gt;

&lt;p&gt;In addition, since the tests are running from &lt;code&gt;forkprove&lt;/code&gt; itself, any calls to &lt;code&gt;Carp::confess&lt;/code&gt; or similar will report a longer stacktrace than they would otherwise, because all of the App::ForkProve machinery is actually still on the call stack. This is not typically a problem, but can potentially cause failures if you are relying on matching the entire stacktrace in a test.&lt;/p&gt;

&lt;h2 id=&#34;TAP-is-ugly&#34;&gt;TAP is ugly!&lt;/h2&gt;

&lt;p&gt;So now we have our tests running nice and quickly, and we make a change in our actual code, and it causes some tests to fail. The trouble is, the actual causes of the failures can be obscured by all of the &lt;code&gt;prove&lt;/code&gt; output, especially if it&#38;#39;s running in parallel. It&#38;#39;d be nice to have an easily skimmable output that makes it much more apparent what is wrong.&lt;/p&gt;

&lt;p&gt;A typical solution here is to run &lt;code&gt;prove -l t&lt;/code&gt;, see the list of failures at the end, and run the test files individually with &lt;code&gt;perl -Ilib t/failing-test.t&lt;/code&gt;. This isn&#38;#39;t great though, since raw TAP isn&#38;#39;t the easiest thing to read. Additionally, if your tests don&#38;#39;t have descriptions, it can be quite hard to find the test you&#38;#39;re looking for.&lt;/p&gt;

&lt;h3 id=&#34;Test::Pretty&#34;&gt;Test::Pretty&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Test::Pretty&#34;&gt;Test::Pretty&lt;/a&gt; modifies the TAP output in order to make it a lot more pleasant to read. It adds colored output, automatically generates a test description based on the line number and contents of tests if they don&#38;#39;t have one. For instance:&lt;/p&gt;

&lt;img src=&#34;test-pretty.png&#34; /&gt;

&lt;p&gt;In addition, it cleans up the output of subtests to make them easier to follow:&lt;/p&gt;

&lt;img src=&#34;test-pretty-subtest.png&#34; /&gt;

&lt;h3 id=&#34;Tips-and-tricks1&#34;&gt;Tips and tricks&lt;/h3&gt;

&lt;p&gt;Another shell alias can make using this easier:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;function t &lt;span class=&#34;synSpecial&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;synConstant&#34;&gt;blib&lt;/span&gt; &lt;span class=&#34;synSpecial&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;synStatement&#34;&gt;then&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;perl &lt;span class=&#34;synSpecial&#34;&gt;-Mblib&lt;/span&gt; &lt;span class=&#34;synSpecial&#34;&gt;-MTest&lt;/span&gt;::Pretty &lt;span class=&#34;synStatement&#34;&gt;&#38;quot;&lt;/span&gt;&lt;span class=&#34;synPreProc&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;else&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;perl &lt;span class=&#34;synSpecial&#34;&gt;-Ilib&lt;/span&gt; &lt;span class=&#34;synSpecial&#34;&gt;-MTest&lt;/span&gt;::Pretty &lt;span class=&#34;synStatement&#34;&gt;&#38;quot;&lt;/span&gt;&lt;span class=&#34;synPreProc&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;synStatement&#34;&gt;&#38;quot;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;fi&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synSpecial&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This way, &lt;code&gt;t t/foo.t&lt;/code&gt; will run the given test file, using &lt;code&gt;blib&lt;/code&gt; if appropriate.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/forkprove&#34;&gt;forkprove&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Test::Pretty&#34;&gt;Test::Pretty&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-20T00:00:00Z</updated><category term="Perl"/><author><name>Jesse Luehrs</name></author></entry><entry><title>A Cache Present</title><link href="http://perladvent.org/2012/2012-12-19.html"/><id>http://perladvent.org/2012/2012-12-19.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;People love receiving &lt;i&gt;cash&lt;/i&gt; for Christmas, but a &lt;i&gt;cache&lt;/i&gt; is a much more useful gift for your performance-hungry web server or application.&lt;/p&gt;

&lt;p&gt;Today we&#38;#39;ll talk about &lt;a href=&#34;https://metacpan.org/module/CHI&#34;&gt;CHI&lt;/a&gt;, a modern Cache Handling Interface for Perl -- sort of a &lt;a href=&#34;https://metacpan.org/module/DBI&#34;&gt;DBI&lt;/a&gt; for caching.&lt;/p&gt;

&lt;h2 id=&#34;USING-CHI&#34;&gt;USING CHI&lt;/h2&gt;

&lt;p&gt;Creating a cache looks like:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;CHI&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;driver&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;...&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;...&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # driver specific args&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;i&gt;driver&lt;/i&gt; indicates the cache backend, which controls how the cache data will be stored. Available backends include &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::Memory&#34;&gt;Memory&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::File&#34;&gt;File&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::BerkeleyDB&#34;&gt;BDB&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::Memcached&#34;&gt;Memcached&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::Redis&#34;&gt;Redis&lt;/a&gt; - see &lt;a href=&#34;https://metacpan.org/search?q=CHI%3A%3ADriver&#34;&gt;CPAN&lt;/a&gt; for a complete list - and creating your own driver is &lt;a href=&#34;https://metacpan.org/module/CHI::Driver::Development&#34;&gt;simple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;namespace&lt;/i&gt; is a string that keeps this cache from other caches on the same backend. Often it&#38;#39;s the name of the caller&#38;#39;s Perl package or script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CHI&lt;/code&gt; honors the standard &lt;i&gt;get&lt;/i&gt;/&lt;i&gt;set&lt;/i&gt; API that most cache modules use:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# Try to get value from cache.&lt;br /&gt;#&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;core&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # Was not in cache. Compute $data here.&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;#&lt;br /&gt;&lt;/span&gt;    &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # Store in cache with a 10 minute expiration time.&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;#&lt;br /&gt;&lt;/span&gt;    &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;10m&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It also provides an all-in-one &lt;i&gt;compute&lt;/i&gt; API, which is shorter and less error-prone:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# Try to get value from cache; if missing, call the sub&lt;br /&gt;# and store the returned value.&lt;br /&gt;#&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;compute&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;10m&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # Compute and return value here&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;FEATURES&#34;&gt;FEATURES&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;CHI&lt;/code&gt; you get a lot of caching features under the tree, and you can use them no matter which backend you&#38;#39;ve chosen.&lt;/p&gt;

&lt;h3 id=&#34;Automatic-key-value-serialization&#34;&gt;Automatic key/value serialization&lt;/h3&gt;

&lt;p&gt;You can store arbitrary &lt;i&gt;values&lt;/i&gt; in the cache, including listrefs, hashrefs and combinations thereof; &lt;code&gt;CHI&lt;/code&gt; will automatically serialize and deserialize them for you. Automatic compression over a certain size is also an option.&lt;/p&gt;

&lt;p&gt;You can also use arbitrary references as cache &lt;i&gt;keys&lt;/i&gt;, e.g.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$pub_id&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$article_id&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$page_id&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This saves you from the tedious and failure-prone process of composing multiple values into a key. And if your key is too long or too weird for your driver, CHI will digest and/or escape it for you.&lt;/p&gt;

&lt;h3 id=&#34;Multilevel-caches&#34;&gt;Multilevel caches&lt;/h3&gt;

&lt;p&gt;You can chain multiple caches together in various ways. For example, here we place a size-limited memory &lt;a href=&#34;http://en.wikipedia.org/wiki/CPU_cache#Multi-level_caches&#34;&gt;L1 cache&lt;/a&gt; in front of a memcached cache. &lt;code&gt;CHI&lt;/code&gt; will look in the memory cache first; on a miss, it will consult memcached and write back the value into the memory cache.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cache&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;CHI&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;driver&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;Memcached&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;servers&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;10.0.0.15:11211&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;10.0.0.15:11212&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;l1_cache&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;Memory&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;max_size&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id=&#34;Miss-stampede-avoidance&#34;&gt;Miss stampede avoidance&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;http://lists.danga.com/pipermail/memcached/2007-July/004810.html&#34;&gt;miss stampede&lt;/a&gt; occurs when a popular cache item expires, and a large number of processes all rush to recompute it. CHI provides &lt;a href=&#34;https://metacpan.org/module/CHI#Getting-and-setting&#34;&gt;two ways&lt;/a&gt; to reduce or avoid this common cache problem - &lt;i&gt;probablistic expiration&lt;/i&gt; (in which expiration occurs over a range, instead of a single fixed time) and &lt;i&gt;busy locks&lt;/i&gt; (in which the first process sets a lock so that other processes know not to start recomputing).&lt;/p&gt;

&lt;h3 id=&#34;Logging-and-statistics&#34;&gt;Logging and statistics&lt;/h3&gt;

&lt;p&gt;You can tell CHI to &lt;a href=&#34;https://metacpan.org/module/CHI#LOGGING&#34;&gt;log&lt;/a&gt; every cache hit, miss and set for debugging purposes. You can also tell CHI to output &lt;a href=&#34;https://metacpan.org/module/CHI#STATS&#34;&gt;statistics&lt;/a&gt; about the performance of your caches, including the hit/miss rate and the average compute time for each namespace.&lt;/p&gt;

&lt;p&gt;Happy caching all!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;CHI&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-19T00:00:00Z</updated><category term="Perl"/><author><name>Jonathan Swartz</name></author></entry><entry><title>Synchronous Operations are So Outdated</title><link href="http://perladvent.org/2012/2012-12-18.html"/><id>http://perladvent.org/2012/2012-12-18.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Understanding-asynchronous-events&#34;&gt;Understanding asynchronous events&lt;/h2&gt;

&lt;p&gt;The best way to explain why synchronous code can sometimes be daunting is to use an example from Real Life&#38;trade;. A single day in our lives can contain plenty of actions that make us cringe and growl. Take, for instance, trying to make a meal.&lt;/p&gt;

&lt;p&gt;Imagine you&#38;#39;re cooking. You wouldn&#38;#39;t wait for the water to boil before you prepared the potatoes. Nor would you wait for the potatoes to be done before you started working on the salad.&lt;/p&gt;

&lt;p&gt;Asynchronous programming means having multiple events happen at the same time. It allows you to get more things done while you&#38;#39;re waiting for other things to happen.&lt;/p&gt;

&lt;p&gt;The fundamental element of asynchronous programming is the callback, so let&#38;#39;s review that first, and then take a look at some examples of async in code-land.&lt;/p&gt;

&lt;p&gt;We will be using &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt; for this article, but the same principles exist in all other async frameworks.&lt;/p&gt;

&lt;h2 id=&#34;Introduction-to-callbacks&#34;&gt;Introduction to callbacks&lt;/h2&gt;

&lt;p&gt;Since multiple events run at the same time, the application (much like the spice) must flow. To make this work, whenever we start one event we include references to the code that should be run when it finishes or hits other milestones. Since the event then &#38;quot;knows&#38;quot; how to proceed on its own, it can start up and work in the background while the rest of the program continues on doing more things.&lt;/p&gt;

&lt;p&gt;We&#38;#39;re going to be using a technique that some are not familiar with: &lt;b&gt;callbacks&lt;/b&gt;. Just to get you up to speed, let me start by explaining callbacks in a nutshell: callbacks are just references to subroutines.&lt;/p&gt;

&lt;p&gt;These subroutines can be defined using names or they can be anonymous. We can call those subroutines by their reference instead of their name.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# callbacks to named subroutines&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$func_reference&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&#38;amp;func&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$func_reference&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@arguments&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# callbacks to anonymous subroutines&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$func_reference&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$func_reference&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@arguments&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If we use &lt;code&gt;sub&lt;/code&gt; to create a reference to a subroutine, we can pass the callback as a parameter directly, without saving it first:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;some_cb_handler&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$callback&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$callback&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;double&#34;&gt;&#38;quot;hello&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# We pass in the callback without ever giving it a name or making it&lt;br /&gt;# globally accessible.&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;some_cb_handler&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$greeting&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$greeting, world!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Reading-from-input&#34;&gt;Reading from input&lt;/h2&gt;

&lt;p&gt;You have an application that needs to read from a handle (which could be a file descriptor, a socket, or even the standard input), but you don&#38;#39;t know when it will be ready to be read.&lt;/p&gt;

&lt;p&gt;In a synchronous application, you&#38;#39;ll be waiting for it to become available, possibly calling &lt;code&gt;sleep&lt;/code&gt; in between. But these days, we&#38;#39;re busy people, we can&#38;#39;t just be waiting by the phone. We have stuff to do!&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;alert_action&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$action&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;New action found: $action&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$io_watcher&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;fh&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;poll&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # we can now read!&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;readline&#34;&gt;&#38;lt;$fh&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^New action: (\w+)/&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;alert_action&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;magic&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# continue to do something else&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;How does that work? By calling &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt;&#38;#39;s &lt;code&gt;io&lt;/code&gt; method, you&#38;#39;re creating a new watcher that checks a file handle for new read events. If it has something to read, it will call the code reference we provided. Both the checks and the subroutine call will happen in the background.&lt;/p&gt;

&lt;p&gt;Also, since we&#38;#39;ve given it all the information it needs (which file handle to poll, what kind of events we want, and what to do in that case), it doesn&#38;#39;t need to hold us back. That way we can continue with some other code, and the watcher will wait and run the background, without bothering us.&lt;/p&gt;

&lt;h2 id=&#34;Keeping-the-watchers-alive&#34;&gt;Keeping the watchers alive&lt;/h2&gt;

&lt;p&gt;There is a problem I haven&#38;#39;t mentioned. That code is fine, except that once it executes the additional code, the application will close, simply because it reached the end of the file. We want to keep the application running, so our watchers will continue to work. How do we do that? Condition variables!&lt;/p&gt;

&lt;p&gt;Condition variables are variables that represent a condition waiting to come true, like your cat waiting for you to get comfortable with a laptop. When the variable becomes true, the cat comes over and lies on your lap, disrupting your work.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$watcher&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;fh&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;poll&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;readline&#34;&gt;&#38;lt;$fh&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^End of processing file/&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;All done!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This time we created a condition variable that is available to the watcher. The watcher still dilligently continues its work. Only this time as soon as it finds a line in the file indicating the end of it, it will call &lt;code&gt;send&lt;/code&gt; on the condition variable, making the condition true, effectively saying &#38;quot;that&#38;#39;s it, we&#38;#39;re done&#38;quot;.&lt;/p&gt;

&lt;p&gt;If someone has called &lt;code&gt;recv&lt;/code&gt; on the condition variable, it will wait until something else in the background (like our watcher) will call &lt;code&gt;send&lt;/code&gt; and then will continue running.&lt;/p&gt;

&lt;p&gt;That means that the line &#38;quot;All done!&#38;quot; will only get written once our worker finished reading the line.&lt;/p&gt;

&lt;p&gt;Another ramification of the condition variable&#38;#39;s behavior is that it is possible to create an infinite loop by creating a condition variable, calling &lt;code&gt;recv&lt;/code&gt;, and not having anything call &lt;code&gt;send&lt;/code&gt; on it. It looks exactly like this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# or in short&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Since the application is now waiting for a condition variable to come true, it will not terminate. Because nothing can call &lt;code&gt;send&lt;/code&gt; on this variable, it basically means the application will stay up indefinitely. The most common usage for this are daemons, which should always be running.&lt;/p&gt;

&lt;h2 id=&#34;Timing-your-cooking&#34;&gt;Timing your cooking&lt;/h2&gt;

&lt;p&gt;The last element in &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt; that we&#38;#39;ll be looking at is the timer. Timers are events (any kind of event) that gets run at some point in time. It can be in a few minutes from now or at a specific hour. It can happen once or it can repeat itself several times, or even forever.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$timer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;after&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;float&#34;&gt;3.5&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;       &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Ping? Pong!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This defines a timer that will wait 3.5 seconds, and then call the subroutine every 5 seconds. Fairly simple. Let&#38;#39;s try a few timers.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@steps&lt;/span&gt;        &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw&#38;lt;Cutting Simmering Cooking Seasoning Serving&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$current_step&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;Preparing&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$t1&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;       &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Current cooking state: $current_step&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$t2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;after&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;# two seconds to wash hands before working!&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# assuming every action takes 10 minutes&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;       &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$current_step&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@steps&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;do_step&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$current_step&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$done&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Dinner is served!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;What we have here isn&#38;#39;t the best example for how to make a meal, but it does give us an example showing multiple timers. The first timer (&lt;code&gt;$t1&lt;/code&gt;) keeps alerting us every seven minutes about our progress. Meanwhile, our second timer picks up an action to do every 10 minutes, and does it. Once no more actions are available, it tells the condition variable that it&#38;#39;s done. It does this by simply returning out of the subroutine (so we don&#38;#39;t call &lt;code&gt;do_step&lt;/code&gt; again) and calling &lt;code&gt;send&lt;/code&gt; at the same time.&lt;/p&gt;

&lt;p&gt;After we created our timers, we set up a &lt;code&gt;recv&lt;/code&gt; on a condition variable, meaning &#38;quot;don&#38;#39;t continue running the rest of the application until we are notified that the timers finished their work&#38;quot;. It will wait in that point in time (without blocking the timers) until the &lt;code&gt;send&lt;/code&gt; is called. Then it will continue and say dinner is finally served. Since it&#38;#39;s the end of the application, the timers will close and the application will end.&lt;/p&gt;

&lt;p&gt;Here is the output we&#38;#39;ll get from running the application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Current cooking state: Preparing
  (do_step() called with &#38;quot;Cutting&#38;quot;)
  Current cooking state: Cutting
  (do_step() called with &#38;quot;Simmering&#38;quot;)
  Current cooking state: Simmering
  Current cooking state: Simmering
  (do_step() called with &#38;quot;Cooking&#38;quot;)
  Current cooking state: Cooking
  (do_step() called with &#38;quot;Seasoning&#38;quot;)
  Current cooking state: Seasoning
  (do_step() called with &#38;quot;Serving&#38;quot;)
  Current cooking state: Serving
  Current cooking state: Serving
  Dinner is served!&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Condition-variables-with-multiple-calls&#34;&gt;Condition variables with multiple calls&lt;/h2&gt;

&lt;p&gt;Sometimes the behavior of the condition variable&#38;#39;s &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;recv&lt;/code&gt; is not flexible enough to handle instances in which you need to be able to wait on multiple calls.&lt;/p&gt;

&lt;p&gt;Suppose you have a calculation to do that depends on the result of multiple database queries. Before the SQL experts jump at it, let&#38;#39;s also suppose these queries are made across different databases.&lt;/p&gt;

&lt;p&gt;A database connection is in fact a network operation, which means it blocks. This is an ideal example for async programming. You could initiate several connections and queries concurrently instead of consequtively. Using condition variables, you would probably try to open three condition variables, and then waiting for each to come true. That won&#38;#39;t work, since you can only call &lt;code&gt;recv&lt;/code&gt; on one variable at a time.&lt;/p&gt;

&lt;p&gt;Instead, condition variables can accept a &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; call to signify a multi-call request. Once there&#38;#39;s been an &lt;code&gt;end&lt;/code&gt; call for each &lt;code&gt;begin&lt;/code&gt; call, it will return to the &lt;code&gt;recv&lt;/code&gt; method.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$sum&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$db&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@dbs&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # beginning an event&lt;br /&gt;&lt;/span&gt;    &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$db&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$query&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$amount&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$sum&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$amount&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # finishing an event&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;All database queries finished.&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Bringing-it-all-together&#34;&gt;Bringing it all together&lt;/h2&gt;

&lt;p&gt;After we&#38;#39;ve gone over a few elements of AnyEvent, we can build a small useful application. We&#38;#39;ll add a few more elements such as &lt;a href=&#34;https://metacpan.org/module/AnyEvent::HTTP&#34;&gt;AnyEvent::HTTP&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Regexp::Common&#34;&gt;Regexp::Common&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/module/File::Basename&#34;&gt;File::Basename&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we have a file that has contains a lot of links and we want to download every image listed in it. These are two different actions: (1) reading the file and (2) downloading the images. We will also have a timer that gives us the progress every two seconds.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;br /&gt;37:&#38;nbsp;&lt;br /&gt;38:&#38;nbsp;&lt;br /&gt;39:&#38;nbsp;&lt;br /&gt;40:&#38;nbsp;&lt;br /&gt;41:&#38;nbsp;&lt;br /&gt;42:&#38;nbsp;&lt;br /&gt;43:&#38;nbsp;&lt;br /&gt;44:&#38;nbsp;&lt;br /&gt;45:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent::HTTP&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Regexp::Common&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;URI&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::Basename&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;basename&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;autodie&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$counter&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;        &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;condvar&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;        &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;open&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;&#38;lt;&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;links.txt&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fhwatcher&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;fh&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;poll&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;readline&#34;&gt;&#38;lt;$fh&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # ignoring lines that aren&#39;t HTTP URIs&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;symbol&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^$RE{URI}{HTTP}$/&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;        # call an HTTP request&lt;br /&gt;&lt;/span&gt;        &lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;http_get&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$body&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;basename&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;syswrite&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$filename&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$body&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$counter&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;++&lt;/span&gt;            &lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;warn&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Couldn&#39;t write to $filename: $!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$progress&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;after&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# giving it two seconds before starting&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# report every two seconds&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cb&lt;/span&gt;       &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;[%s] Update: finished downloading $counter images.\n&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;AnyEvent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$cv&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;close&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Finished downloading all files&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Let&#38;#39;s analyze what we&#38;#39;ve got here. We use some modules that you should recognize. If you don&#38;#39;t, you should check them out.&lt;/p&gt;

&lt;p&gt;The next thing is opening a file handle. We then set up a watcher for some I/O operations using &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt;&#38;#39;s &lt;code&gt;io&lt;/code&gt; method. It needs the file handle we are going to operate on, and the kind of operation we&#38;#39;ll do (we pick &lt;code&gt;r&lt;/code&gt; for reading) and a callback to run. This callback is the main thing that takes a bit to understand.&lt;/p&gt;

&lt;p&gt;Every time we read a line that has a URL, we call &lt;code&gt;begin&lt;/code&gt; on the condition variable. We issue an HTTP request for that URL and once we finish fetching it and saving it, we issue the corresponding &lt;code&gt;end&lt;/code&gt; call. When all &lt;code&gt;begin&lt;/code&gt; calls have &lt;code&gt;end&lt;/code&gt;ed, it will return to the &lt;code&gt;recv&lt;/code&gt; method, much like calling &lt;code&gt;send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also created a progress timer that announces, every two seconds, the number of links we&#38;#39;ve sent. You&#38;#39;ll notice it uses &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt;&#38;#39;s &lt;code&gt;now&lt;/code&gt;, which is the recommended way to call &lt;code&gt;time&lt;/code&gt; when running in an event loop.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;recv&lt;/code&gt; call in the end will wait until all &lt;code&gt;begin&lt;/code&gt; calls will be closed. Once we&#38;#39;ve worked on the entire file, it will print a nice message and the application will end.&lt;/p&gt;

&lt;h2 id=&#34;Just-the-beginning&#34;&gt;Just the beginning...&lt;/h2&gt;

&lt;p&gt;Once you get used to programming asynchronously, it&#38;#39;s like having scissors: you just run with it! &lt;b&gt;Note:&lt;/b&gt; Do not run with scissors. &#38;#x2702; &#38;#x1F3C3;&lt;/p&gt;

&lt;p&gt;Try out an event framework and see how much fun it is for yourself. Perl has many to offer, such as &lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/POE&#34;&gt;POE&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/IO::Async&#34;&gt;IO::Async&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Reflex&#34;&gt;Reflex&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/IO::Lambda&#34;&gt;IO::Lambda&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Coro&#34;&gt;Coro&lt;/a&gt;, and more.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/POE&#34;&gt;POE&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/IO::Async&#34;&gt;IO::Async&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Reflex&#34;&gt;Reflex&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/IO::Lambda&#34;&gt;IO::Lambda&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Coro&#34;&gt;Coro&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-18T00:00:00Z</updated><category term="Perl"/><author><name>Sawyer X</name></author></entry><entry><title>Santa Has Dependencies Too</title><link href="http://perladvent.org/2012/2012-12-17.html"/><id>http://perladvent.org/2012/2012-12-17.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;In the old days, Santa&#38;#39;s elves would build every toy from scratch, but now he outsources most of the parts for the toys. Naturally, he has created a sophisticated supply-chain management system to ensure that each toy is consistently built from the same parts.&lt;/p&gt;

&lt;p&gt;The same is true for software development. These days, our applications depend on lots of frameworks and libraries. So we also need to manage the supply of those dependencies to ensure that every build has the same &#38;quot;parts.&#38;quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Pinto&#34;&gt;Pinto&lt;/a&gt; helps you manage your supply of dependencies by creating a custom repository of Perl modules. The repository is fully compatible with CPAN installers (e.g. &lt;code&gt;cpan&lt;/code&gt;, &lt;code&gt;cpanm&lt;/code&gt;, &lt;code&gt;cpanp&lt;/code&gt;), but unlike the public CPAN, the modules in your Pinto repository only change when you want to change them. You&#38;#39;ll get the exact same result each and every time you build.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pinto&lt;/code&gt; command line utility does all the work of creating the repository, and provides some helpful tools for managing change as your dependencies evolve over time. Let&#38;#39;s take a look at some of the things you can do...&lt;/p&gt;

&lt;p&gt;First, let&#38;#39;s create a repository. All you need is a directory where the repository will live (we&#38;#39;ll use &lt;i&gt;~/my_repo&lt;/i&gt; here) and the name of the stack (we&#38;#39;ll use &lt;code&gt;prod&lt;/code&gt; here). A stack is just a named subset of modules in your repository (more on that later). Here&#38;#39;s what the command would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo init --stack=prod&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we want to use &lt;a href=&#34;https://metacpan.org/module/Catalyst&#34;&gt;Catalyst&lt;/a&gt; for a new application. Let&#38;#39;s get it from the CPAN and put it in our Pinto repository. This command will put the latest (at this moment) version of Catalyst and all of its dependencies into our Pinto repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo pull Catalyst&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install Catalyst, we just point &lt;code&gt;cpanm&lt;/code&gt; (or &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanp&lt;/code&gt;) at the stack inside the repository. Every time we do this, we&#38;#39;ll get exactly the same version of Catalyst and its dependencies, even if newer versions have been released to the public CPAN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cpanm --mirror=file:///home/jeff/my_repo/prod --mirror-only Catalyst&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From time to time, Santa decides to upgrade the parts used to build a toy, or even switch to a new parts supplier entirely. To ensure quality, Santa always sets up a separate assembly line for the elves to test the new parts before committing them to mass production.&lt;/p&gt;

&lt;p&gt;With Pinto, you can do the same thing. Suppose that Catalyst 4.0 is released to the CPAN and we want to try upgrading our application, which now has several other dependencies of its own. We can make an experimental duplicate of those dependencies by copying the stack like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo copy prod catalyst-upgrade&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any changes we make to the &#38;quot;catalyst-upgrade&#38;quot; stack are completely separate from the &#38;quot;prod&#38;quot; stack. So we can now go ahead and upgrade Catalyst (and whatever new modules it may require) like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo pull --stack=catalyst-upgrade Catalyst~4.0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test our upgraded application dependencies, we just make a new build by pointing cpanm at the &#38;quot;catalyst-upgrade&#38;quot; stack inside the repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ cpanm --mirror=file:///home/jeff/my_repo/catalyst-upgrade --mirror-only Catalyst&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If our application (and all of its dependencies) build cleanly then we can just merge two stacks together and throw away the experimental stack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo merge catalyst-upgrade prod
  $ pinto -r ~/my_repo delete catalyst-upgrade&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Occasionally, Santa&#38;#39;s elves find that a new version of a part is flawed or just not compatible with current their line of toys. Since the workshop is pretty big, it can be hard to ensure that every elf foreman doesn&#38;#39;t mistakenly order the new (flawed) part for his assembly line. So Santa keeps a real-time blacklist of all the part numbers that are not allowed in the workshop.&lt;/p&gt;

&lt;p&gt;This happens all the time in software development, so Pinto allows you to &#38;quot;pin&#38;quot; the modules in your repository, which prevents them from being upgraded. Suppose we already have Plack 2.0 in our Pinto repository and we learn that Plack 3.0 is not compatible with our application. So we can pin Plack to let everyone know that it can&#38;#39;t be upgraded yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ pinto -r ~/my_repo pin Plack&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If anyone tries to upgrade Plack directly or to satisfy the prerequisites for some other module, then Pinto will refuse to comply. Once you&#38;#39;ve resolved the problem, then you can unpin Plack and upgrade it as needed.&lt;/p&gt;

&lt;p&gt;Keeping lists of all the naughty and nice children is huge task, so Santa has become very good at record keeping. He also keeps excellent records of everything that happens in the workshop. This helps him to identify the critical links in his supply chain or reward deserving elves.&lt;/p&gt;

&lt;p&gt;Pinto keeps records too, so you can see what&#38;#39;s in the repository right now and how it has changed over time. Here are some of the things you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Show all the modules in the stack right now:
  $ pinto -r ~/my_repo list&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Show who&#38;#39;s responsible for the current modules in the stack:
  $ pinto -r ~/my_repo blame&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Show how and why the stack has changed over time:
  $ pinto -r ~/my_repo log --detailed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can imagine, Santa Claus has pretty much perfected the science of supply-chain management, so when it comes to managing our supply of module dependencies, we software developers could probably learn a lot from him. Perhaps Pinto should have been called &#38;quot;Donner&#38;quot; or &#38;quot;Vixen.&#38;quot;&lt;/p&gt;

&lt;h2 id=&#34;SEE-ALSO&#34;&gt;SEE ALSO&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Pinto&#34;&gt;Pinto on CPAN&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Pinto::Manual&#34;&gt;Pinto::Manual on CPAN&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=oaBBVZFhJUk&#34;&gt;Pinto presentation at YAPC&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-17T00:00:00Z</updated><category term="Perl"/><author><name>Jeffrey Ryan Thalhammer</name></author></entry><entry><title>Creating Your Own Perl</title><link href="http://perladvent.org/2012/2012-12-16.html"/><id>http://perladvent.org/2012/2012-12-16.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( reduce )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@numbers&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$even_sum&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;reduce&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@numbers&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;See what I did there? Unlike some functional programming languages, Perl doesn&#38;#39;t have a built-in &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;reduce&lt;/code&gt; keyword, so I cleverly imported the &lt;code&gt;reduce&lt;/code&gt; function from &lt;a href=&#34;https://metacpan.org/module/List::Util&#34;&gt;List::Util&lt;/a&gt;. (Of course, if I&#38;#39;d been really clever, I&#38;#39;d have noticed List::Util also has a &lt;code&gt;sum&lt;/code&gt; function available.)&lt;/p&gt;

&lt;p&gt;Due to some trickery with sub prototypes and manipulating its caller&#38;#39;s symbol table, List::Util manages to make its &lt;code&gt;reduce&lt;/code&gt; function feel just like a built-in language feature. It uses the same codeblock syntax as &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;, and the same magic &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; variables as &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Via tricks like these, plus ties, overloads, custom &lt;code&gt;import&lt;/code&gt; functions, source filters, &lt;a href=&#34;https://metacpan.org/module/Devel::Declare&#34;&gt;Devel::Declare&lt;/a&gt;, &lt;code&gt;%^H&lt;/code&gt;, and (in newer versions of Perl) the pluggable keyword API, Perl modules have the power to affect their caller in ways far beyond the mechanisms that other programming languages make available. When you use a module that does this, you&#38;#39;re not just loading a library and using it at arm&#38;#39;s length; you&#38;#39;re changing the very syntax of Perl - lexically, within your module.&lt;/p&gt;

&lt;p&gt;When starting a new script, or a new module, this is what we do. We add a bunch of &lt;code&gt;use&lt;/code&gt; statements to the top of the file to tweak Perl&#38;#39;s flavour to our liking. We make Perl a more suitable language for getting the job done; we turn a general purpose programming language into a domain-specific language suitable for our exact task. This will often begin with something like:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;but if you&#38;#39;re writing anything non-trivial, it&#38;#39;s likely that a bunch of other &lt;code&gt;use&lt;/code&gt; statements will join them.&lt;/p&gt;

&lt;p&gt;(Of course, some modules are plain old object-oriented code that make no attempt to alter their caller&#38;#39;s syntax. Different approaches are appropriate for different tasks.)&lt;/p&gt;

&lt;h3 id=&#34;Twelve-Lords-A-Leaping&#34;&gt;Twelve Lords A Leaping&lt;/h3&gt;

&lt;p&gt;Here are some of my favourite syntax-bending modules:&lt;/p&gt;

&lt;h4 id=&#34;List::Util-List::MoreUtils&#34;&gt;List::Util / List::MoreUtils&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/List::Util&#34;&gt;List::Util&lt;/a&gt; is a core Perl module with a small collection of array munging functions; &lt;a href=&#34;https://metacpan.org/module/List::MoreUtils&#34;&gt;List::MoreUtils&lt;/a&gt; is a collection of extras that didn&#38;#39;t quite make the shortlist.&lt;/p&gt;

&lt;p&gt;Many of these make creative use of sub prototypes to look and act like Perl&#38;#39;s built-in list manipulation functions. The &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; functions are especially useful, and should be in every Perl programmer&#38;#39;s toolkit.&lt;/p&gt;

&lt;h4 id=&#34;PerlX::Maybe&#34;&gt;PerlX::Maybe&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/PerlX::Maybe&#34;&gt;PerlX::Maybe&lt;/a&gt; provides a tiny function making it easier to work with optional named parameters, a la:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$santa&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;title&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Saint&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;name&lt;/span&gt;      &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Nicholas&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;maybe&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;telephone&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$phone&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# $phone might be undef&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;maybe&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;email&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$email&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;# $email might be undef&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h4 id=&#34;Syntax::Keyword::Junction&#34;&gt;Syntax::Keyword::Junction&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Syntax::Keyword::Junction&#34;&gt;Syntax::Keyword::Junction&lt;/a&gt; implements support for something approaching the Perl 6 concept of junctions; that is, variables which have multiple values at once.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$reindeer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw/&lt;br /&gt;&#38;nbsp;&#38;nbsp;Dasher Dancer Prancer Vixen Comet Cupid Donder Blitzen&lt;br /&gt;/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$reindeer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Dasher&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;# true&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$reindeer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Prancer&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;# true&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$reindeer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Rudolf&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;# false&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It achieves this with nothing more than careful use of overloading.&lt;/p&gt;

&lt;h4 id=&#34;aliased&#34;&gt;aliased&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/aliased&#34;&gt;aliased&lt;/a&gt; provides short aliases for long class names.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;aliased&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Rangifer::Tarandus&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Reindeer&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$rudolf&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Reindeer&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The short alias is just a constant that returns the class name as a string. Simple idea, but useful.&lt;/p&gt;

&lt;h4 id=&#34;Safe::Isa&#34;&gt;Safe::Isa&lt;/h4&gt;

&lt;p&gt;Ever get the &lt;i&gt;Can&#38;#39;t call method &#38;quot;isa&#38;quot; on an undefined value&lt;/i&gt; blues? &lt;a href=&#34;https://metacpan.org/module/Safe::Isa&#34;&gt;Safe::Isa&lt;/a&gt; gives you a way to call methods like &lt;code&gt;isa&lt;/code&gt; and &lt;code&gt;can&lt;/code&gt; on scalars without checking that they are defined and blessed.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# Might return undef if there are no cheap desserts&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$pudding&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$menu&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;find_food&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;max_price&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;category&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;DESSERT&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$pudding&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$_isa&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;Plum::Pudding&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Yum!&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It takes advantage of the fact that coderefs may be called as methods even on unblessed or undefined invocants.&lt;/p&gt;

&lt;h4 id=&#34;Try::Tiny&#34;&gt;Try::Tiny&lt;/h4&gt;

&lt;p&gt;While &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; can be used as a try-catch mechanism in Perl, there are numerous gotchas. &lt;a href=&#34;https://metacpan.org/module/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; works around them for you, giving you a nice syntax for exception catching.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;give&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$recipient&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;match&#34;&gt;/^Can&#39;t call method &#38;quot;give&#38;quot;/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# ignore&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;There are even nicer modules like &lt;a href=&#34;https://metacpan.org/module/TryCatch&#34;&gt;TryCatch&lt;/a&gt; available, but Try::Tiny&#38;#39;s zero-dependency approach - it uses nothing more than prototypes and guards (dummy objects with just a destructor) - is perfect for even small projects.&lt;/p&gt;

&lt;h4 id=&#34;NEXT&#34;&gt;NEXT&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/NEXT&#34;&gt;NEXT&lt;/a&gt; adds a &lt;code&gt;SUPER&lt;/code&gt;-like pseudo-class to your module, but with more control of method redispatch than &lt;code&gt;SUPER&lt;/code&gt; gives you. Good if you&#38;#39;re programming with multiple inheritance.&lt;/p&gt;

&lt;p&gt;These days you should probably use &lt;a href=&#34;https://metacpan.org/module/mro&#34;&gt;mro&lt;/a&gt; instead, but NEXT deserves a mention for its clever use of AUTOLOAD and capitalised package names to create the illusion of new syntax.&lt;/p&gt;

&lt;h4 id=&#34;Web::Simple&#34;&gt;Web::Simple&lt;/h4&gt;

&lt;p&gt;This Plack-based web app framework uses a sub prototype hack for dispatching.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;prototype&#34;&gt;(POST + /naughty_list/person+ ?name=&#38;amp;*)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$misc_params&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h4 id=&#34;autovivification&#34;&gt;autovivification&lt;/h4&gt;

&lt;p&gt;Perl&#38;#39;s autovivification feature can sometimes be counterintuitive.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$menu&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;undef&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$menu&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;plum&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;pudding&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;# false&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$menu&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;plum&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;# true !!!&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/module/autovivification&#34;&gt;autovivification&lt;/a&gt; module can selectively disable autovivification for particular scopes, or get Perl to issue a warning or fatal error when autovivification occurs. Very handy.&lt;/p&gt;

&lt;p&gt;Lots of deep XS magic in this module.&lt;/p&gt;

&lt;h4 id=&#34;PerlX::QuoteOperator&#34;&gt;PerlX::QuoteOperator&lt;/h4&gt;

&lt;p&gt;Perl has various built-in quote-like operators. &lt;code&gt;qw()&lt;/code&gt; constructs arrays; &lt;code&gt;qr()&lt;/code&gt; quotes regular expressions and &lt;code&gt;qx()&lt;/code&gt; acts like backticks. &lt;a href=&#34;https://metacpan.org/module/PerlX::QuoteOperator&#34;&gt;PerlX::QuoteOperator&lt;/a&gt; allows you to define your own.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;PerlX::QuoteOperator&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;qdeer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;-with&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;prototype&#34;&gt;($)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Reindeer&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$rudolf&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;qdeer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;Rudolf&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;PerlX::QuoteOperator uses &lt;a href=&#34;https://metacpan.org/module/Devel::Declare&#34;&gt;Devel::Declare&lt;/a&gt; to rewrite &lt;code&gt;qdeer(...)&lt;/code&gt; to &lt;code&gt;qdeer qq(...)&lt;/code&gt; while Perl is compiling your code.&lt;/p&gt;

&lt;h4 id=&#34;Function::Parameters&#34;&gt;Function::Parameters&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Function::Parameters&#34;&gt;Function::Parameters&lt;/a&gt; provides parameter lists for Perl subs. Instead of:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;give&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$recipient&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can write:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;give&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$gift&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$recipient&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It supports named and positional parameters, optional parameters and methods with invocants. It provides an introspection API, and if you&#38;#39;re using &lt;a href=&#34;https://metacpan.org/module/Moose&#34;&gt;Moose&lt;/a&gt;, then it can hook into the Moose type constraint system to validate parameter types. Such &lt;code&gt;fun&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;Function::Parameters uses Perl&#38;#39;s new(ish) pluggaable keyword API, so is only available for Perl 5.14 and above.&lt;/p&gt;

&lt;h4 id=&#34;MooseX::Declare&#34;&gt;MooseX::Declare&lt;/h4&gt;

&lt;p&gt;Where to start? MooseX::Declare gives you &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;role&lt;/code&gt; keywords for declaring Moose classes and Moose roles; &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; for inhertitance, role composition and meta traits; &lt;code&gt;method&lt;/code&gt; for declaring methods with signatures; &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;around&lt;/code&gt;, &lt;code&gt;override&lt;/code&gt; and &lt;code&gt;augment&lt;/code&gt; for method modifiers; and &lt;code&gt;clean&lt;/code&gt; for scrubbing away helper functions so that outside code can&#38;#39;t call them.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;role&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Flight&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;fly&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$when&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Location&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;MagicReindeer&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Reindeer&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Flight&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;fly&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$when&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Location&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;TimingException&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;double&#34;&gt;&#38;quot;not Christmas Eve&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$when&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;amp;&#38;amp;&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$when&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It uses Devel::Declare. Extensively. And a partridge in a pear tree.&lt;/p&gt;

&lt;h3 id=&#34;Bundle-Up&#34;&gt;Bundle Up!&lt;/h3&gt;

&lt;p&gt;If you&#38;#39;re working on a large project with many modules, you may find that you are repeating the same set of imports at the top of almost every file. Perhaps something like:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Try::Tiny&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Scalar::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( blessed )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( first reduce )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::MoreUtils&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( uniq )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw( file dir )&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;OK, so you can copy and paste, but copy-paste code is the enemy. Don&#38;#39;t repeat yourself. Wouldn&#38;#39;t it be nice to bundle up all the above functionality into a single module?&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;My::Syntax&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Well, here&#38;#39;s an example of how you could write that module:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;My::Syntax&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Try::Tiny&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw()&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Scalar::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw()&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw()&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::MoreUtils&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw()&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw()&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;:5.14&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;Try::Tiny&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;Scalar::Util&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;blessed&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;List::Util&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;first&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;reduce&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;List::MoreUtils&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;uniq&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;import::into&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$caller&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;dir&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Alternatively, &lt;a href=&#34;https://metacpan.org/module/Syntax::Collector&#34;&gt;Syntax::Collector&lt;/a&gt; makes it a little neater:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;My::Syntax&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Syntax::Collector&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;-collect&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q/&lt;br /&gt;use strict           1.00         ;&lt;br /&gt;use warnings         1.00         ;&lt;br /&gt;use feature          1.00         qw( :5.14 );&lt;br /&gt;use Try::Tiny        0.11         ;&lt;br /&gt;use Scalar::Util     1.23         qw( blessed );&lt;br /&gt;use List::Util       1.23         qw( first reduce );&lt;br /&gt;use List::MoreUtils  0.33         qw( uniq );&lt;br /&gt;use Path::Class      0.26         qw( file dir );&lt;br /&gt;/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Yes, that&#38;#39;s a big quoted string (&lt;code&gt;q/.../&lt;/code&gt;), but no, it&#38;#39;s not just &lt;code&gt;eval&lt;/code&gt;ed.&lt;/p&gt;

&lt;p&gt;Bundling up imports into a single module makes it easier to encourage project-wide coding standards. You can&#38;#39;t &#38;quot;forget&#38;quot; to enable warnings any more (but of course you can explicitly unimport it). You no longer have any excuse for using &lt;code&gt;ref&lt;/code&gt; when you mean &lt;code&gt;blessed&lt;/code&gt;, or &lt;code&gt;grep&lt;/code&gt; when you want &lt;code&gt;first&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bundling up imports allows you to consider ideas like &lt;a href=&#34;https://metacpan.org/module/true&#34;&gt;true.pm&lt;/a&gt; which would seem ridiculous if you needed to repeat them at the top of every file, but become more appealing if they are included as part of an import collection.&lt;/p&gt;

&lt;p&gt;And bundling up imports allows you to manage your project&#38;#39;s dependencies from a single place. Don&#38;#39;t want to depend on List::MoreUtils any more? Then write your own replacement for &lt;code&gt;uniq&lt;/code&gt; and get My::Syntax to export that instead. (The Syntax::Collector documentation includes examples of how to write a syntax collection that also acts as an exporter.)&lt;/p&gt;

&lt;p&gt;So go on; create your own Perl. Make it your gift to yourself.&lt;/p&gt;

&lt;h2 id=&#34;SEE-ALSO&#34;&gt;SEE ALSO&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/List::Util&#34;&gt;List::Util&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/List::MoreUtils&#34;&gt;List::MoreUtils&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/PerlX::Maybe&#34;&gt;PerlX::Maybe&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Syntax::Keyword::Junction&#34;&gt;Syntax::Keyword::Junction&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/aliased&#34;&gt;aliased&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Safe::Isa&#34;&gt;Safe::Isa&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/NEXT&#34;&gt;NEXT&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Web::Simple&#34;&gt;Web::Simple&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/autovivification&#34;&gt;autovivification&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/PerlX::QuoteOperator&#34;&gt;PerlX::QuoteOperator&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Function::Parameters&#34;&gt;Function::Parameters&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/MooseX::Declare&#34;&gt;MooseX::Declare&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/import::into&#34;&gt;import::into&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Syntax::Collector&#34;&gt;Syntax::Collector&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-16T00:00:00Z</updated><category term="Perl"/><author><name>Toby Inkster</name></author></entry><entry><title>Gift Wrapping, part II: Locking the Room</title><link href="http://perladvent.org/2012/2012-12-15.html"/><id>http://perladvent.org/2012/2012-12-15.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;Continuing on the topic of gift wrapping, another traditional manoeuver to wrap gifts in peace consist on locking yourself in a room (typically, with a sign reading &lt;i&gt;Do Not Enter&lt;/i&gt; on the door) as you perform the deed.&lt;/p&gt;

&lt;p&gt;With programs, you&#38;#39;ll want to do the same thing if your program should only have one instance running at any given time. You want to have a lock file, but then you have to see how arcane things like &lt;code&gt;&lt;a href=&#34;https://metacpan.org/module/perlfunc#flock&#34;&gt;flock&lt;/a&gt;&lt;/code&gt; works, think about cross-platform issues&#38;hellip; or, maybe, you could use &lt;a href=&#34;https://metacpan.org/module/File::Flock::Tiny&#34;&gt;File::Flock::Tiny&lt;/a&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::Flock::Tiny&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$lock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::Flock::Tiny&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;write_pid&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;/tmp/bedroom&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;somebody else is hogging the wrapping space already&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;wrap_presents&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# all done&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$lock&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Niftier still, it turns out that the above example is overkill, because &lt;code&gt;File::Flock::Tiny&lt;/code&gt; will automatically release the lock when its &lt;code&gt;$lock&lt;/code&gt; object goes out of scope. Knowing that, the &lt;code&gt;$lock-&#38;gt;release&lt;/code&gt; line is not necessary. This auto-release trick plays also very nicely with &lt;a href=&#34;https://metacpan.org/module/Moose&#34;&gt;Moose&lt;/a&gt;. Want to have a script with lockfile functionality? Here goes:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Gift::Wrapping&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Moose&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;lockfile&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;is&lt;/span&gt;      &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;ro&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;isa&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;Str&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/tmp/bedroom&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;ro&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;isa&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;File::Flock::Tiny::Lock&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;File::Flock::Tiny&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;write_pid&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lockfile&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;resource already locked\n&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;gather_presents&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;__PACKAGE__&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;make_immutable&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;With that, your script will judicously lock itself in the bedroom before taking out the presents from their secret place. As soon as the object is done and get out of scope (most likely as the the script terminates), the lock will be automatically removed.&lt;/p&gt;

&lt;p&gt;Oh. This being said, check under the bed. Chances are that locking the room, no matter how cleverly, won&#38;#39;t help you if your tikes are already hidding under the bed. Just saying&#38;hellip;&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/File::Flock::Tiny&#34;&gt;File::Flock::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlfunc#flock&#34;&gt;flock&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Fcntl&#34;&gt;Fcntl&lt;/a&gt; (if you must)&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-15T00:00:00Z</updated><category term="Perl"/><author><name>Yanick Champoux</name></author></entry><entry><title>Self-contained applications</title><link href="http://perladvent.org/2012/2012-12-14.html"/><id>http://perladvent.org/2012/2012-12-14.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;In-No-Dependency-Land&#34;&gt;In No-Dependency Land&lt;/h2&gt;

&lt;p&gt;While the proliferation of solutions like &lt;a href=&#34;https://metacpan.org/module/local::lib&#34;&gt;local::lib&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/cpanminus&#34;&gt;cpanminus&lt;/a&gt; has made it a breeze to manage dependencies, there are still some rare occassions in which we need to be able to ship code that has no external non-core dependencies.&lt;/p&gt;

&lt;p&gt;There are a few existing solutions for them, but we&#38;#39;re going to concentrate on a new one called &lt;b&gt;FatPacker&lt;/b&gt;.&lt;/p&gt;

&lt;h2 id=&#34;Our-application&#34;&gt;Our application&lt;/h2&gt;

&lt;p&gt;Of course, we just happen to have a sample application we want to pack. It downloads various pages from our website and compiles a statistics report. It uses &lt;a href=&#34;https://metacpan.org/module/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; as a user agent. Our application begins with the lines:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/perl&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;HTTP::Tiny&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Our app is, surprisingly, saved as the file &lt;i&gt;ourapp.pl&lt;/i&gt;.&lt;/p&gt;

&lt;h2 id=&#34;Packing-the-deps&#34;&gt;Packing the deps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt; comes with an application called &lt;i&gt;fatpack&lt;/i&gt;. You&#38;#39;ll use &lt;i&gt;fatpack&lt;/i&gt; to get at all of App::FatPacker&#38;#39;s features. There are four simple steps for packing your dependencies. Let&#38;#39;s go over them.&lt;/p&gt;

&lt;h3 id=&#34;Tracing&#34;&gt;Tracing&lt;/h3&gt;

&lt;p&gt;To find out what dependencies our code has, we &lt;code&gt;trace&lt;/code&gt; our app. This will create a file called &lt;i&gt;fatpacker.trace&lt;/i&gt;, which includes a list of modules that &lt;i&gt;fatpack&lt;/i&gt; has discovered.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ fatpack trace ourapp.pl&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In case some modules aren&#38;#39;t successfully traced, you can ask &lt;code&gt;fatpack&lt;/code&gt; to include them:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ fatpack trace --use=Additional::Module ourapp.pl&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If we open the &lt;i&gt;fatpacker.trace&lt;/i&gt; file, we can see it collected a few modules, including both &lt;i&gt;HTTP/Tiny.pm&lt;/i&gt; and &lt;i&gt;Carp.pm&lt;/i&gt; (which &lt;a href=&#34;https://metacpan.org/module/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; uses).&lt;/p&gt;

&lt;h3 id=&#34;Gathering-packlists&#34;&gt;Gathering packlists&lt;/h3&gt;

&lt;p&gt;Packlists are files that distributions install. They contain information on which modules are included in the distribution. FatPacker needs to find the packlist for each module in order to make sure it includes all dependencies recursively and does not miss anything. One module is likely to use another module, which might use another module in turn, and so on.&lt;/p&gt;

&lt;p&gt;We can call &lt;code&gt;packlists-for&lt;/code&gt; with a list of modules, or we can feed it the content of the trace output we created with the previous command. It will print out a list of all the packlists, which we&#38;#39;ll simply redirect to a file so we can reuse this information.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ fatpack packlists-for `cat fatpacker.trace` &#38;gt; packlists&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;i&gt;packlists&lt;/i&gt; file will include the path to the packlists of &lt;a href=&#34;https://metacpan.org/module/Carp&#34;&gt;Carp&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;Forming-the-tree&#34;&gt;Forming the tree&lt;/h3&gt;

&lt;p&gt;In this step FatPacker collects all the dependencies recursively into a directory called &lt;i&gt;fatlib&lt;/i&gt;, which it will then be able to pack together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tree&lt;/code&gt; needs a list of packlists. Lucky for us, we saved the packlists that our previous command has found in a file called &lt;i&gt;packlists&lt;/i&gt;. Let&#38;#39;s just call &lt;code&gt;tree&lt;/code&gt; and feed it that file.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ fatpack tree `cat packlists`&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Taking a look at our &lt;i&gt;fatlib&lt;/i&gt; directory, we&#38;#39;ll see the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    fatlib/
    &#38;#x251C;&#38;#x2500;&#38;#x2500; Carp
    &#38;#x2502;&#38;nbsp;&#38;nbsp; &#38;#x2514;&#38;#x2500;&#38;#x2500; Heavy.pm
    &#38;#x251C;&#38;#x2500;&#38;#x2500; Carp.pm
    &#38;#x2514;&#38;#x2500;&#38;#x2500; HTTP
        &#38;#x2514;&#38;#x2500;&#38;#x2500; Tiny.pm&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can clearly see it added &lt;a href=&#34;https://metacpan.org/module/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/Carp&#34;&gt;Carp&lt;/a&gt;, but you can also see it added &lt;a href=&#34;https://metacpan.org/module/Carp::Heavy&#34;&gt;Carp::Heavy&lt;/a&gt; which comes with &lt;a href=&#34;https://metacpan.org/module/Carp&#34;&gt;Carp&lt;/a&gt;. This is what recursively copying dependencies means.&lt;/p&gt;

&lt;h3 id=&#34;Packing-dependencies&#34;&gt;Packing dependencies&lt;/h3&gt;

&lt;p&gt;Once we have all our dependencies in a directory, we can finally pack it all nicely using the last command: &lt;code&gt;file&lt;/code&gt;. This command packs all the modules in the current &lt;i&gt;fatlib&lt;/i&gt; directory. It will also try to pack any &lt;i&gt;lib&lt;/i&gt; directory that exists in the current directory. If none is present, you will need to create it.&lt;/p&gt;

&lt;p&gt;Since the command only packs the modules, we&#38;#39;re still missing our code that uses them, so we will concatenate that as well. We will also print this to a new file so we could ship it.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ (fatpack file; cat ourapp.pl) &#38;gt; ourapp.packed.pl&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Stick a shebang line at the top of &lt;i&gt;ourapp.packed.pl&lt;/i&gt; and that&#38;#39;s all there is to it!&lt;/p&gt;

&lt;p&gt;You can now ship &lt;i&gt;ourapp.packed.pl&lt;/i&gt; to any location, and it will include all dependencies recursively.&lt;/p&gt;

&lt;p&gt;You can open our newly-packed application file and see the way it has packed everything together:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;BEGIN&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;%fatpacked&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$fatpacked&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;double&#34;&gt;&#38;quot;Carp.pm&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;heredoc&#34;&gt;&#38;lt;&#38;lt;&#39;CARP&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;heredoc_content&#34;&gt;        ... # entire Carp&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;CARP&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;$fatpacked{&#38;quot;Carp/Heavy.pm&#38;quot;} = &#38;lt;&#38;lt;&#39;CARP_HEAVY&#39;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;... # entire Carp::Heavy&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;CARP_HEAVY&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;$fatpacked{&#38;quot;HTTP/Tiny.pm&#38;quot;} = &#38;lt;&#38;lt;&#39;HTTP_TINY&#39;;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;... # entire HTTP::Tiny&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;HTTP_TINY&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;# fixing of @INC to load these&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;...&lt;br /&gt;} # END OF FATPACK CODE&lt;br /&gt;#!perl&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use HTTP::Tiny;&lt;br /&gt;&lt;br /&gt;# rest of our code&lt;br /&gt;...&lt;/span&gt;&lt;span class=&#34;heredoc_terminator&#34;&gt;CARP&lt;br /&gt;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Its-already-being-used&#34;&gt;It&#38;#39;s already being used!&lt;/h2&gt;

&lt;p&gt;There is at least one famous project which uses this method to create a self-contained program: &lt;a href=&#34;https://metacpan.org/module/cpanminus&#34;&gt;cpanminus&lt;/a&gt; proved this method to be useful for beginners and seasoned system administrators in providing a self-contained full-fledged CPAN client, always available at your finger-tips without any installations required (other than having a Perl interpreter, of course).&lt;/p&gt;

&lt;p&gt;You can always download a packed &lt;code&gt;cpanminus&lt;/code&gt; program and use it, wherever you are, using the following command:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ curl -kL cpanmin.us &#38;gt; cpanm&lt;br /&gt;$ perl cpanm Some::Module&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Caveat&#34;&gt;Caveat&lt;/h2&gt;

&lt;p&gt;There are some considerations still:&lt;/p&gt;

&lt;h3 id=&#34;Compile-time-code-will-be-run&#34;&gt;Compile time code will be run&lt;/h3&gt;

&lt;p&gt;If you have any compile-time code (think &lt;code&gt;BEGIN&lt;/code&gt; blocks), they will be run as part of the tracing step. Generally, these aren&#38;#39;t recommended for most use cases anyway.&lt;/p&gt;

&lt;p&gt;If you have any compile-time code which shouldn&#38;#39;t run upon tracing, you might want to consider refactoring it into run-time code.&lt;/p&gt;

&lt;h3 id=&#34;Lazily-loaded-modules-wont-be-found&#34;&gt;Lazily loaded modules won&#38;#39;t be found&lt;/h3&gt;

&lt;p&gt;Any modules that are loaded lazily (such as &lt;code&gt;require&lt;/code&gt; statements) will not be traced successfully. You can, however, provide them as additional modules for the &lt;code&gt;trace&lt;/code&gt; command, as described above.&lt;/p&gt;

&lt;h3 id=&#34;XS-modules-are-not-supported&#34;&gt;XS modules are not supported&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt; only supports Pure-Perl modules, so if you&#38;#39;re using any XS modules, you&#38;#39;ll need to have them installed remotely.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-14T00:00:00Z</updated><category term="Perl"/><author><name>Sawyer X</name></author></entry><entry><title>Take a little REST</title><link href="http://perladvent.org/2012/2012-12-13.html"/><id>http://perladvent.org/2012/2012-12-13.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;About six months ago I learned about &lt;a href=&#34;https://github.com/micha/resty&#34;&gt;resty&lt;/a&gt;. I think Stevan Little may have mentioned it in his &lt;a href=&#34;https://metacpan.org/module/Web::Machine&#34;&gt;Web::Machine&lt;/a&gt; talk. Unfortunately &lt;code&gt;resty&lt;/code&gt; had problems running in &lt;code&gt;zsh&lt;/code&gt;. I initially tried to fix the problem, but then I ported it to Perl instead, which was not only easier but also ended up having a lot of other exciting benfits.&lt;/p&gt;

&lt;h2 id=&#34;What-even-is-that-thing&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=H4w0_n1Yras&#38;amp;t=3m29s&#34;&gt;What even is that thing?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Adenosine is a tool that allows you to fiddle with &lt;a href=&#34;https://en.wikipedia.org/wiki/Representational_state_transfer&#34;&gt;RESTful&lt;/a&gt; services easily. The basic gist is that you can use &lt;code&gt;HTTP&lt;/code&gt; verbs (&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;TRACE&lt;/code&gt;) directly in your shell. You get the body of the response as stdout, headers and more as stderr if you turn on &lt;code&gt;-v&lt;/code&gt;, the exit code is directly related to the error code, and there&#38;#39;s a minimal plugin architecture (with more hooks on their way.)&lt;/p&gt;

&lt;h2 id=&#34;How-do-I-use-it&#34;&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;The first thing you need to do with adenosine is to set up your environment to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ eval $(adenosine exports)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing you need to do is set the base URI. The base URI is just a URI with a &lt;code&gt;*&lt;/code&gt; in it. So for example, why don&#38;#39;t we start with the DuckDuckGo API. A simple, useful base URI could be set as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ adenosine &#38;#39;http://api.duckduckgo.com/?q=*&#38;amp;o=json&#38;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So with that set all you need to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ GET test | pp&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above will put &lt;code&gt;test&lt;/code&gt; into the base URI in place of the &lt;code&gt;*&lt;/code&gt;. &lt;a href=&#34;https://metacpan.org/module/pp&#34;&gt;pp&lt;/a&gt; is just a tiny json pretty printer bundled with adenosine.&lt;/p&gt;

&lt;p&gt;If you don&#38;#39;t specify a URI scheme (&lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;), your URI will be prepended with &lt;code&gt;http://&lt;/code&gt;, and if you don&#38;#39;t specify a &lt;code&gt;*&lt;/code&gt; it will be appended to your URI.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; isn&#38;#39;t all you can do, though it&#38;#39;s certainly what &lt;i&gt;I&lt;/i&gt; do most often. Here&#38;#39;s an example of how I might send a text message with our API at work:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ adenosine &#38;#39;http://our.api.com/api/2/*/sms&#38;#39;&lt;br /&gt;$ POST myaccount &#38;#39;{&#38;quot;message&#38;quot;:&#38;quot;Hello Frew!&#38;quot;,&#38;quot;destinations&#38;quot;:[8675309]}&#38;#39; \&lt;br /&gt;&#38;nbsp;&#38;nbsp;-H &#38;#39;Content-Type: application/json&#38;#39; -H &#38;#39;Accept: application/json&#38;#39;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you want to edit the data you are about to post, use adenosine&#38;#39;s &lt;code&gt;-V&lt;/code&gt; switch to open your &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There&#38;#39;s more in the &lt;a href=&#34;https://metacpan.org/module/adenosine&#34;&gt;documentation&lt;/a&gt;, but that&#38;#39;s basically how it works.&lt;/p&gt;

&lt;h2 id=&#34;Too-much-to-type&#34;&gt;Too much to type!&lt;/h2&gt;

&lt;p&gt;Sometimes you&#38;#39;ll want to set certain headers for a given host. For example, in my previous example I need to set the &lt;code&gt;Content-Type&lt;/code&gt; and &lt;code&gt;Accept&lt;/code&gt; headers so that my application will do the right thing. I actually &lt;b&gt;always&lt;/b&gt; want to set those headers when interacting with my application. The way to do this nicely is to create a configuration file for my server. For example, I could create the following:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;~/.resty/our.api.com&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;POST -H &#38;#39;Content-Type: application/json&#38;#39; -H &#38;#39;Accept: application/json&#38;#39;&lt;br /&gt;PUT -H &#38;#39;Content-Type: application/json&#38;#39; -H &#38;#39;Accept: application/json&#38;#39;&lt;br /&gt;DELETE -H &#38;#39;Content-Type: application/json&#38;#39; -H &#38;#39;Accept: application/json&#38;#39;&lt;br /&gt;GET -H &#38;#39;Content-Type: application/json&#38;#39; -H &#38;#39;Accept: application/json&#38;#39;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;That will set those two headers for all four of the major HTTP verbs, so the previous example could now be merely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ POST myaccount &#38;#39;{&#38;quot;message&#38;quot;:&#38;quot;Hello Frew!&#38;quot;,&#38;quot;destinations&#38;quot;:[8675309]}&#38;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;One of the most exciting new features of adenosine (vs. resty) is that it supports plugins. I initially just wrote two: Stopwatch and Rainbow.&lt;/p&gt;

&lt;h3 id=&#34;Stopwatch&#34;&gt;&lt;code&gt;Stopwatch&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Stopwatch&lt;/code&gt; adds timing info to the output from &lt;code&gt;-v&lt;/code&gt;. I like to know how long various commands and requests take, especially when I am the implementor of said command. If something takes longer than 0.5s, I did a bad job. So &lt;code&gt;Stopwatch&lt;/code&gt; gives me exactly what information I need to know. To enable it put the following in &lt;i&gt;~/.adenosinerc.yml&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;:&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;- &lt;/span&gt;::Stopwatch&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id=&#34;Rainbow&#34;&gt;&lt;code&gt;Rainbow&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Rainbow&lt;/code&gt; color codes the output from &lt;code&gt;-v&lt;/code&gt;. I really like this, but obviously it&#38;#39;s not for everyone. At the most basic, you can enable it the same way that you enable &lt;code&gt;Stopwatch&lt;/code&gt;, but that just gives you the most basic color coding. &lt;code&gt;Rainbow&lt;/code&gt; is implemented to be easily themable as well as overridable. If you just wanted to override the color of the method from the request, put the following in &lt;i&gt;~/.adenosinerc.yml&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;:&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;synIdentifier&#34;&gt;::Rainbow&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;synSpecial&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synIdentifier&#34;&gt;request_method_color&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;:&lt;/span&gt; cyan&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synSpecial&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;That&#38;#39;s fine for experimentation, but I&#38;#39;d like to encourage everyone to make their own themes and submit them as pull requests. To make a theme, all you need to do is create a file as follows:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;App::Adenosine::Plugin::Rainbow::Halloween&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;App::Adenosine::Plugin::Rainbow&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;+response_header_colon_color&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;+response_header_name_color&#39;&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;orange1&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;+response_header_value_color&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;orange2&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;Rainbow&lt;/code&gt; uses &lt;a href=&#34;https://metacpan.org/module/Term::ExtendedColor&#34;&gt;Term::ExtendedColor&lt;/a&gt;, so to see what colors are available run the &lt;code&gt;color_matrix&lt;/code&gt; script that comes with it. Also note that while in the example above only a single color is specified, the foreground, backround, and even a few other (spottily supported) attributes may be set:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;+response_header_value_color&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;fg&lt;/span&gt;        &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;orange2&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;bg&lt;/span&gt;        &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;cyan&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# what a bad choice&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;bold&lt;/span&gt;      &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;italic&lt;/span&gt;    &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;underline&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Once you&#38;#39;ve done that, your &lt;i&gt;~/.adenosinerc.yml&lt;/i&gt; can reference your theme directly:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synIdentifier&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;synSpecial&#34;&gt;:&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;- &lt;/span&gt;::Rainbow::Halloween&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;synStatement&#34;&gt;- &lt;/span&gt;::Stopwatch&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&#38;hellip;and that&#38;#39;s adenosine! Please play with it and let me know if you like it!&lt;/p&gt;

&lt;h2 id=&#34;Installing-adenosine-without-CPAN&#34;&gt;Installing &lt;code&gt;adenosine&lt;/code&gt; without CPAN&lt;/h2&gt;

&lt;p&gt;Most readers of this article are likely to be comfortable installing adenosine from the CPAN, but if you don&#38;#39;t want to use CPAN, or you somehow got to this post as a non-&lt;a href=&#34;http://en.wikipedia.org/wiki/Just_another_Perl_hacker&#34;&gt;japh&lt;/a&gt;, this might be more your speed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; git clone http://github.com/frioux/app-adenosine-prefab
 source app-adenosine-prefab/adenosine-exports&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/adenosine&#34;&gt;adenosine&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/micha/resty&#34;&gt;resty&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-13T00:00:00Z</updated><category term="Perl"/><author><name>Arthur Axel &#34;fREW&#34; Schmidt</name></author></entry><entry><title>Testing networking client code using Test::LWP::UserAgent</title><link href="http://perladvent.org/2012/2012-12-12.html"/><id>http://perladvent.org/2012/2012-12-12.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Test::LWP::UserAgent&#34;&gt;Test::LWP::UserAgent&lt;/a&gt; is a module I wrote after writing several networking client libraries for &lt;code&gt;$work&lt;/code&gt; with inconsistent and spotty test coverage &#38;mdash; what I most wanted to do was fully simulate the server end of a network connection, without having to delve deeply into &lt;a href=&#34;https://metacpan.org/module/LWP&#34;&gt;LWP&lt;/a&gt;&#38;#39;s internal implementation, nor mock a lot of methods, which the traditional mock object approach would require.&lt;/p&gt;

&lt;p&gt;Exploring the options available led me to Yury Zavarin&#38;#39;s &lt;a href=&#34;https://metacpan.org/module/Test::Mock::LWP::Dispatch&#34;&gt;Test::Mock::LWP::Dispatch&lt;/a&gt;, whose API I adapted into the initial version of &lt;a href=&#34;https://metacpan.org/module/Test::LWP::UserAgent&#34;&gt;Test::LWP::UserAgent&lt;/a&gt;. It behaves exactly like &lt;a href=&#34;https://metacpan.org/module/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;, one of the most popular HTTP client libraries in perl, in all respects except for the portion that actually sends the request out to the network - at that point it returns the first response that you have preconfigured that matches the outbound request.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;map_response&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;regexp&#34;&gt;qr/example.com/&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;HTTP::Response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;http://example.com&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# prints 200&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;http://google.com&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# prints 404&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In the above example, no outbound reqest passing through this user agent will use the live network (this is the default behaviour). Any request whose URI matches &lt;code&gt;/example.com/&lt;/code&gt; will receive an HTTP 200 response, and the remaining requests will return a 404.&lt;/p&gt;

&lt;p&gt;If, however, you wish to capture only some requests, while letting the remainder use the network normally, you can enable the &lt;code&gt;network_fallback&lt;/code&gt; feature:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;network_fallback&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;map_response&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;regexp&#34;&gt;qr/example.com/&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;HTTP::Response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;));&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;http://example.com&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# prints 200&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;http://google.com&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# prints 200 &#8230; if Google is up!&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And indeed if you inspect the &lt;code&gt;$response&lt;/code&gt; object returned, you will see that it contains the actual network response from contacting &lt;a href=&#34;http://google.com&#34;&gt;http://google.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Configuration can also be done globally, if you want all user agents in your program to use the same settings (or if you do not have direct control over the actual user agent object being used, but just its class):&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;map_response&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Test::LWP::UserAgent&#34;&gt;Test::LWP::UserAgent&lt;/a&gt; inherits from &lt;a href=&#34;https://metacpan.org/module/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;, so it satisfies &lt;code&gt;isa&lt;/code&gt; requirements that you may have via &lt;a href=&#34;https://metacpan.org/module/Moose&#34;&gt;Moose&lt;/a&gt; or another system that uses type checking. This means that all the normal options available in &lt;a href=&#34;https://metacpan.org/module/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt; are still available to you, and work identically, for example:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;cookie_jar&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$ENV{HOME}/.cookies.txt&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can also use &lt;a href=&#34;https://metacpan.org/module/Test::LWP::UserAgent&#34;&gt;Test::LWP::UserAgent&lt;/a&gt; to connect to a local &lt;a href=&#34;https://metacpan.org/module/PSGI&#34;&gt;PSGI&lt;/a&gt; application seamlessly, which can be very useful when you have a client and server installed on the same box but do not want to fuss with separate code for handling this case, or if you want more fine-grained control over what responses to send:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$app&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Plack::Util::load_psgi&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;./myapp.psgi&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;register_psgi&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;mytestdomain.com&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$app&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$response&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$useragent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;CODE-EXAMPLES&#34;&gt;CODE EXAMPLES&lt;/h2&gt;

&lt;p&gt;The code examples above are fleshed out as fully-working code in the examples/ directory under &lt;a href=&#34;http://metacpan.org/release/Test-LWP-UserAgent&#34;&gt;http://metacpan.org/release/Test-LWP-UserAgent&lt;/a&gt;, along with a detailed example of some unit tests for a hypothetical networking client library.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Test::LWP::UserAgent&#34;&gt;Test::LWP::UserAgent&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-12T00:00:00Z</updated><category term="Perl"/><author><name>Karen Etheridge</name></author></entry><entry><title>Making a list and checking it twice</title><link href="http://perladvent.org/2012/2012-12-11.html"/><id>http://perladvent.org/2012/2012-12-11.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;Poor Santa. It&#38;#39;s getting close to Christmas, and he still hasn&#38;#39;t made his list of CPAN authors yet! Who will get coal? Who will get a present?&lt;/p&gt;

&lt;p&gt;With the clock ticking, he decides to automate his list building with Perl, but still needs to check it twice.&lt;/p&gt;

&lt;p&gt;Santa doesn&#38;#39;t need a GUI, he likes the terminal just fine, so he&#38;#39;s going to write a program to decide if the CPAN authors are naughty or nice and then prompt him to confirm each one.&lt;/p&gt;

&lt;p&gt;How should he prompt? He likes the nice simple prompt of ExtUtils::MakeMaker, should he use it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl -MExtUtils::MakeMaker -wE &#38;#39;prompt(&#38;quot;Naughy?&#38;quot;, &#38;quot;yes&#38;quot;)&#38;#39;
    Naughty? [yes]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading all of ExtUtils::MakeMaker just to get a prompt is just a little bit gross, so maybe he can do better. Next stop&#38;hellip; CPAN!&lt;/p&gt;

&lt;p&gt;So many prompting modules to choose from&#38;hellip; (sigh)&#38;hellip; the usual problem with CPAN. But wait, look! A &#38;quot;Tiny&#38;quot; module, and it works &lt;b&gt;exactly&lt;/b&gt; like ExtUtils::MakeMaker&#38;hellip; &lt;a href=&#34;https://metacpan.org/module/IO::Prompt::Tiny&#34;&gt;IO::Prompt::Tiny&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Santa decides to give it a try:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::Slurp&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw/write_file/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;IO::Prompt::Tiny&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw/prompt/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;ORDB::CPANUploads&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Time::Piece&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# Find each CPAN author&#39;s latest release date&lt;br /&gt;# If they didn&#39;t release in 2012, let&#39;s call them naughty&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$results&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;ORDB::CPANUploads&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;selectall_arrayref&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;select author, max(released) from uploads group by author&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# Make a list&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;%list&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$author&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cast&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$results&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$id&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;];&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$date&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;gmtime&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$author&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;  # Check it once&lt;br /&gt;&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$prompt&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;\n%-9s released on %s.  Naughty? (yes/no)&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$date&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$ans&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;prompt&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$prompt&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$date&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;lt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2012&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;yes&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;no&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$list&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$ans&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^y/i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;naughty&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;nice&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;  # Check it twice&lt;br /&gt;&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$check&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;prompt&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Are you sure $id is $list{$id}? (yes/no)&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;yes&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;redo&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$check&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^y/i&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;write_file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;single&#34;&gt;&#39;list.txt&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;atomic&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;$_ is $list{$_}\n&#38;quot;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;%list&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Excellent, now he&#38;#39;s ready to make his list and find all those naughty CPAN authors who haven&#38;#39;t released in 2012:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl naughty-or-nice.pl

    AADLER    released on Sun Feb 13 20:32:59 2011.  Naughty? (yes/no) [yes] 
    Are you sure AADLER is naughty? (yes/no) [yes] 

    AAKD      released on Wed Nov  9 06:26:08 2005.  Naughty? (yes/no) [yes] 
    Are you sure AAKD is naughty? (yes/no) [yes] 

    AAKHTER   released on Thu Nov 10 03:18:33 2005.  Naughty? (yes/no) [yes] 
    Are you sure AAKHTER is naughty? (yes/no) [yes] 

    AALLAN    released on Fri Nov 17 20:44:54 2006.  Naughty? (yes/no) [yes] 
    Are you sure AALLAN is naughty? (yes/no) [yes] 

    AANOAA    released on Sat Feb 12 09:10:34 2011.  Naughty? (yes/no) [yes] 
    Are you sure AANOAA is naughty? (yes/no) [yes] 

    AAR       released on Sun Mar 11 19:50:00 2012.  Naughty? (yes/no) [no] 
    Are you sure AAR is nice? (yes/no) [yes] 

    AARDEN    released on Wed Apr 30 16:19:59 2003.  Naughty? (yes/no) [yes] 
    Are you sure AARDEN is naughty? (yes/no) [yes]

    &#38;#x22EE;

    ZWON      released on Thu Sep  1 15:21:14 2011.  Naughty? (yes/no) [yes] yes
    Are you sure ZWON is naughty? (yes/no) [yes] yes

    ZZZ       released on Tue Aug 16 17:05:53 2011.  Naughty? (yes/no) [yes] yes
    Are you sure ZZZ is naughty? (yes/no) [yes] yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After bouncing on the return key almost 12,000 times, Santa is ready for Christmas on CPAN!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/IO::Prompt::Tiny&#34;&gt;IO::Prompt::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/IO::Prompt::Hooked&#34;&gt;IO::Prompt::Hooked&lt;/a&gt; - a handy, minimalist validation wrapped around IO::Prompt::Tiny&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/IO::Prompter&#34;&gt;IO::Prompter&lt;/a&gt; - a feature-packed all-singing all-dancing bit of Damianware&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IO::Prompter::Tinier - not yet written&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-11T00:00:00Z</updated><category term="Perl"/><author><name>David Golden</name></author></entry><entry><title>The Greatest Tradition of All</title><link href="http://perladvent.org/2012/2012-12-10.html"/><id>http://perladvent.org/2012/2012-12-10.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;The Holidays. No time in the calendar can boast a higher density of traditions per diem than this glorious tail end of the year. But amidst this gleefull storm of traditions dealing with the culinary, the jocose, the social, one particularly stands out for being almost universally observed.&lt;/p&gt;

&lt;p&gt;I&#38;#39;m talking about the hallowed ritual of returning presents.&lt;/p&gt;

&lt;p&gt;This problem, funnily enough, isn&#38;#39;t restricted to packages that come with bows and glitter. Perl distributions, historically, don&#38;#39;t come with a return policy. That is, once distribution &lt;code&gt;Foo-Bar&lt;/code&gt; is installed, it stays installed. Like aunt Thelma&#38;#39;s pan-chromatic acrylic sweater, it would linger at the back of the closet -- dusty, unused and untouched by more-discriminating-than-that moths, an immutable testament that taste isn&#38;#39;t a trait passed through genetic lines. Which usually isn&#38;#39;t such a big problem: computers usually have deep closet spaces.&lt;/p&gt;

&lt;h2 id=&#34;When-Gifts-Turn-to-Time-Bombs&#34;&gt;When Gifts Turn to Time-Bombs&lt;/h2&gt;

&lt;p&gt;There are, however, a few cases where that lingering can cause issues. The most common is when those ghosts of installation pasts interfere with the current festivities.&lt;/p&gt;

&lt;p&gt;For example, if version 1 of the distribution &lt;code&gt;Holidays-Activities&lt;/code&gt; contains&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /lib/Holidays/Activities/SingSongs.pm
    /lib/Holidays/Activities/BeMerry.pm
    /lib/Holidays/Activities/MeetFriends.pm
    /lib/Holidays/Activities/DressUpAsElf.pm&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and version 2, after realising that tights, bell-adorned curly slippers and short skirts aren&#38;#39;t for everybody, revises its payload to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /lib/Holidays/Activities/SingSongs.pm
    /lib/Holidays/Activities/BeMerry.pm
    /lib/Holidays/Activities/MeetFriends.pm
    /lib/Holidays/Activities/DressUpAsSanta.pm&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then somebody first installing version 1, and then version 2, will end up with some of last year&#38;#39;s leftovers, so to speak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /lib/Holidays/Activities/SingSongs.pm
    /lib/Holidays/Activities/BeMerry.pm
    /lib/Holidays/Activities/MeetFriends.pm
    /lib/Holidays/Activities/DressUpAsElf.pm
    /lib/Holidays/Activities/DressUpAsSanta.pm&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yet, this is still not guaranteed to cause problem. If the &lt;code&gt;Holidays-Activities&lt;/code&gt; modules are called piecemeal, nobody with a lick of good sense will ever call &lt;code&gt;use Holidays::Activities::DressUpAsElf&lt;/code&gt;, and everybody&#38;#39;s eyeballs will be spared. But if, say, &lt;code&gt;Holidays::Activities&lt;/code&gt; use a snazzy module like &lt;a href=&#34;https://metacpan.org/module/Module::Pluggable&#34;&gt;Module::Pluggable&lt;/a&gt; to find all the activities one needs to do during those merry times:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Holidays::Activities&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Module::Pluggable&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;search_path&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;Holidays::Activities&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;require&lt;/span&gt;     &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;celebrate&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;b&gt;BAM!&lt;/b&gt; We end up with a user sporting tights, a cheerfully rotund pot-belly, lots of facial hair and a pointy nose. That sound you&#38;#39;re hearing in your head? That&#38;#39;s the screams of millions of children for whom the Holidays will never be the same.&lt;/p&gt;

&lt;h2 id=&#34;Ghost-Of-Installs-Yet-To-Come-Give-Me-a-Chance&#34;&gt;Ghost Of Installs Yet To Come, Give Me a Chance!&lt;/h2&gt;

&lt;p&gt;Fortunately, all is not lost. As it happens, most modern CPAN clients provide a little-known-yet-handy stash of Pepto-Bismol alongside the milk and cookies: the installation of a distribution will also include a &lt;i&gt;.packlist&lt;/i&gt; file listing all installed files (the modules, the scripts, the manpages, the whole deal). For example, for a &lt;code&gt;Dist::Zilla&lt;/code&gt; installed in &lt;i&gt;/opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla.pm&lt;/i&gt;, a &lt;i&gt;.packlist&lt;/i&gt; will be created in &lt;i&gt;/opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/x86_64-linux/auto/Dist/Zilla/.packlist&lt;/i&gt; and will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /opt/perlbrew/perls/perl-5.16.1/bin/dzil
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command/add.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command/authordeps.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command/build.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command/clean.pm
    /opt/perlbrew/perls/perl-5.16.1/lib/site_perl/5.16.1/Dist/Zilla/App/Command/install.pm
    ... and so on, and so forth ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Word of caution: there are some instances where those &lt;i&gt;.packlist&lt;/i&gt; will be missing. Some Linux distributions, belonging squarely on the &lt;b&gt;naughty&lt;/b&gt; list, don&#38;#39;t include them in their packaging of perl distributions. It&#38;#39;s also possible, if you still celebrate the Saturnalia and run on a pre-modern era perl, that you won&#38;#39;t have them.&lt;/p&gt;

&lt;h2 id=&#34;Are-the-Batteries-Included-With-That-Toy&#34;&gt;Are the Batteries Included With That Toy?&lt;/h2&gt;

&lt;p&gt;Partially. If one dig deeps in the &lt;a href=&#34;https://metacpan.org/module/Module::Build::Cookbook&#34;&gt;lore of Module::Build&lt;/a&gt;, one would find an almost-undocumented &lt;code&gt;--uninst&lt;/code&gt; option that stands for exactly what you think. So it&#38;#39;s possible to do, during a manual installation dance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    perl Build.PL
    ./Build test
    ./Build install --uninst 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt; also offer a similar command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    perl Makefile.Pl
    make test
    make UNINST=1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As was &lt;a href=&#34;http://blogs.perl.org/users/joel_berger/2012/11/rfc-modulebuildcleaninstall.html&#34;&gt;discussed recently&lt;/a&gt;, however, both systems seem to have issues. And, beside, while a mechanism is offered, it puts the onus of cleaning the leftover of past parties to the user. &lt;i&gt;Manual cleaning&lt;/i&gt;, to boot. Hardly optimal.&lt;/p&gt;

&lt;h2 id=&#34;We-Need-the-Help-of-Elves-just-skip-the-tights-please&#34;&gt;We Need the Help of Elves (just skip the tights, please)&lt;/h2&gt;

&lt;p&gt;Fairly recently, &lt;a href=&#34;https://metacpan.org/module/Module::Build::CleanInstall&#34;&gt;Module::Build::CleanInstall&lt;/a&gt; made its appearance to help with this problem. This module is a subclass of &lt;a href=&#34;https://metacpan.org/module/Module::Build&#34;&gt;Module::Build&lt;/a&gt; that simply adds an automatic uninstallation of previous versions of a distribution (provided that the &lt;i&gt;.packlist&lt;/i&gt; file is found) before doing the new install. Its usage couldn&#38;#39;t be simplier: change all mention of Module::Build to Module::Build::CleanInstall in the &lt;i&gt;Build.PL&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Module::Build::CleanInstall&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;Module::Build::CleanInstall&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;dist_name&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Holidays-Activities&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# same as Module::Build&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;create_build_script&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;and you&#38;#39;re good to go (just don&#38;#39;t forget to add Module::Build::CleanInstall as a build dependency in your distribution &lt;i&gt;META.json&lt;/i&gt; or &lt;i&gt;META.yml&lt;/i&gt;).&lt;/p&gt;

&lt;p&gt;A different solution has also emerged for the special case of &lt;a href=&#34;https://metacpan.org/module/File::ShareDir&#34;&gt;File::ShareDir&lt;/a&gt;-based shared files. Instead of trying to remove past files, this approach proposes to bundle all shared files in a single tarball. As the name of the tarball remains the same from one version to the next, one is thus assured that the new file will always clobber its previous incarnation. And the space saving brought by the compression could easily be seen as a nice dollop of whipped cream atop an already appealing hot cocoa. Of course, for the author, dealing with the tarballing of the shared files at release time, and handling their uncompression in the code is one more fixing that must be added to the already extensive work-feast that is release management. And that is why two modules have been created to help there: &lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::ShareDir::Tarball&#34;&gt;Dist::Zilla::Plugin::ShareDir::Tarball&lt;/a&gt; auto-tarballs share directories at release time (provided that you use &lt;a href=&#34;https://metacpan.org/module/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;, natch):&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;synComment&#34;&gt;; in your dist.ini file&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;synSpecial&#34;&gt;[ShareDir]&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;synSpecial&#34;&gt;[ShareDir::Tarball]&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;and &lt;a href=&#34;https://metacpan.org/module/File::ShareDir::Tarball&#34;&gt;File::ShareDir::Tarball&lt;/a&gt; takes care of that pesky extraction business for you, and transparently provides the user with the extracted temporary directory/files.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::ShareDir::Tarball&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;:all&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;dist_dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;Holidays-Activities&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# $dir is now the path to a temporary directory holding&lt;br /&gt;# the extracted content of the shared files tarball&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Aunts-Will-Be-Aunts-Garish-Sweaters-Will-Still-Pop-Up&#34;&gt;Aunts Will Be Aunts, Garish Sweaters Will Still Pop Up&lt;/h2&gt;

&lt;p&gt;... but at least now we have a few more venues to quietly deal with those presents once the party is over. And this is good, for a sage once said&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &#38;quot;To receive is pleasure, and to give is higher pleasure still. But to
   give back and get what you really wanted all along with a minimum of fuss
   and without waiting in line with your coat on and screaming brats right
   behind you for hours on end is the greatest pleasure of
   them all.&#38;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or something like that. I might be paraphrasing.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/File::ShareDir::Tarball&#34;&gt;File::ShareDir::Tarball&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::ShareDir::Tarball&#34;&gt;Dist::Zilla::Plugin::ShareDir::Tarball&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-10T00:00:00Z</updated><category term="Perl"/><author><name>Yanick Champoux</name></author></entry><entry><title>Fixing the regexep code block facility</title><link href="http://perladvent.org/2012/2012-12-09.html"/><id>http://perladvent.org/2012/2012-12-09.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;The &lt;code&gt;/(?{})/&lt;/code&gt; code-execution facility was added to regular expressions back in 1998, in the 5.005 release. Since then it&#38;#39;s been sitting there, marked experimental, until in 2012, the implementation was completely re-written for the 5.17.1 release.&lt;/p&gt;

&lt;p&gt;The way it originally worked was that during regex compilation, if an opening &lt;code&gt;(?{&lt;/code&gt; was seen, the balancing &lt;code&gt;}&lt;/code&gt; was found, and the text between the braces was passed to perl&#38;#39;s internal eval mechanism. But after compiling the code, the execution was skipped, and instead the optree and pad of the compiled eval were saved and attached to the regexp object. Later when the regexp was being executed, the current pad would be set to the saved pad, and the ops in the optree called.&lt;/p&gt;

&lt;p&gt;So, what&#38;#39;s wrong with that?&lt;/p&gt;

&lt;p&gt;Well, everything really.&lt;/p&gt;

&lt;p&gt;First, at the most trivial level, the code isn&#38;#39;t properly parsed, so something like &lt;code&gt;/(?{ $x = &#38;#39;{&#38;#39; })/&lt;/code&gt; is an error, due the simplistic counting of balancing braces. This is in contrast to something like &lt;code&gt;&#38;quot;foo$hash{ $x ? &#38;#39;{&#38;#39; : &#38;#39;[&#38;#39; }bar&#38;quot;&lt;/code&gt;, where the expression for the hash index doesn&#38;#39;t require balanced braces.&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;match&#34;&gt;/(?{ $x = &#39;{&#39; })/&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# &#38;lt;-- was an error&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;double&#34;&gt;&#38;quot;foo$hash{ $x ? &#39;{&#39; : &#39;[&#39; }bar&#38;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# &#38;lt;-- not an error&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;So the first change was to integrate the parsing of the code blocks with the parsing of the surrounding Perl code, at least for literal regexes.&lt;/p&gt;

&lt;p&gt;The second big issue was that by just saving the &lt;a href=&#34;https://metacpan.org/module/perlglossary#scratchpad&#34;&gt;pad&lt;/a&gt; and resurrecting it from time to time, lexicals at best did the wrong thing, and at worst caused segfaults. In particular, the behaviour of closures didn&#38;#39;t match reasonable expectations. For example, this code:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@r&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;regexp&#34;&gt;qr/^(??{$i})$/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;ok 0\n&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;0&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$r&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;ok 1\n&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;1&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$r&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;ok 2\n&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;2&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$r&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;prints out three ok&#38;#39;s now, but formerly printed nothing. It works because in terms of pads, closures, etc, these:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;match&#34;&gt;/A(?{B})C/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$r&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;regexp&#34;&gt;qr/A(?{B})C/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;(where B is a block of code) are now parsed (in terms of lexicals) roughly as:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;match&#34;&gt;/A/&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;amp;&#38;amp;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;amp;&#38;amp;&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/C/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$r&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/A/&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;amp;&#38;amp;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;amp;&#38;amp;&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/C/&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;That is, in the first line, the code block shares the same pad as the surrounding code, while in the second example it uses the pad of a hidden anonymous sub, which is cloned anew on each call to &lt;code&gt;qr//&lt;/code&gt;. This makes it all Just Do the Right Thing. &lt;code&gt;qr//&lt;/code&gt; constructs that contain arbitrary code now act like closures.&lt;/p&gt;

&lt;p&gt;However, Perl also supports patterns that are determined at runtime, or which contain a mixture of compile- and runtime patterns, such as&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$pat&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;C(?{D})&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;eval&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;match&#34;&gt;/A(?{B})-$pat/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Formerly, as the run-time pattern was being assembled, any bits of literal code (such as the &lt;code&gt;B&lt;/code&gt; above) would be recompiled, destroying any closure information. Now, such code snippets are preserved, and only the non-literal bits are compiled. Similarly where regexp objects are included within a larger pattern:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$re&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;regexp&#34;&gt;qr/C(?{D})/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;eval&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;match&#34;&gt;/A(??{B})-$re/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Although the text of the &lt;code&gt;$re&lt;/code&gt; pattern is interpolated and recompiled, any code blocks within &lt;code&gt;$re&lt;/code&gt; are &lt;i&gt;not&lt;/i&gt; recompiled.&lt;/p&gt;

&lt;p&gt;Finally, because pads are handled properly now, things don&#38;#39;t go awry during recursion:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# test-recurse-regex.pl&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;recurse&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$n&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;ok\n&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;A$n&#38;quot;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^A(??{$n})$/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;recurse&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$n&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;recurse&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&#38;hellip;and then&#38;hellip;&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ perl test-recurse-regex.pl&lt;br /&gt;ok&lt;br /&gt;ok&lt;br /&gt;ok&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;There were lots of other subtleties involved, but those are the ones I can think of off the top my head. These bugs made the entire &lt;code&gt;(?{})&lt;/code&gt; and &lt;code&gt;(??{})&lt;/code&gt; features unreliable in earlier perls, but with the upcoming perl 5.18 release, it should work sanely and predictably!&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlre#code&#34;&gt;code in regex&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlre#code-1&#34;&gt;postponed regex&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/re#eval-mode&#34;&gt;regex &#38;#39;eval&#38;#39; mode&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-09T00:00:00Z</updated><category term="Perl"/><author><name>Dave Mitchell</name></author></entry><entry><title>Atomic Gift Wrapping</title><link href="http://perladvent.org/2012/2012-12-08.html"/><id>http://perladvent.org/2012/2012-12-08.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;Gift wrapping. You rarely want to do it by the Christmas Tree because you know, you just &lt;b&gt;know&lt;/b&gt; that just when you&#38;#39;re in the middle of wrapping that huge &lt;i&gt;Dino-Rampage Total Combat Battlezone&lt;/i&gt; box, one of your child processes will innocently try to access the living room resources, see the half-ready present, go totally ape-boinker, and make every single day till Christmas a grueling hell. So instead, you usually wrap the presents in some dark corner of the house &#38;mdash; usually the attic, the shed, or the secret room you built specifically for that purpose. Then, when the pile o&#38;#39; prezzies is ready, you carefully peek out in the hallway, make sure there is no living being in sight, rush down the stairs holding the loot with every prehensible limb available, and dump the whole thing under the tree. When the amazed kids ask how the glittery boxes got there? Well&#38;hellip; &lt;i&gt;Magic&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Atomic file writing? Exactly the same thing.&lt;/p&gt;

&lt;p&gt;Most of the time, you can write files at your leisure, but sometimes you have other programs that can access it at any time, and you don&#38;#39;t want them to end up bits and pieces. So you either begin to play with locking the file (&#38;quot;No one enter the room until I&#38;#39;m done!&#38;quot;) or you write the new file in a different place, and when everything is ready, you do a quick switcheroo where you replace the old copy with its new incarnation. There is still a window where things can go wrong, but it&#38;#39;s a minimal one.&lt;/p&gt;

&lt;p&gt;Of course, the switcheroo is much easier (and funnier) to say than to do. That is, unless you use &lt;a href=&#34;https://metacpan.org/module/File::AtomicWrite&#34;&gt;File::AtomicWrite&lt;/a&gt;, which takes care of all the nitty gritty details for you. To wit:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::AtomicWrite&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$present_list&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::AtomicWrite&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/etc/wishlist&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$present_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;fh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;For Xmas, I want:&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;A pony&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# snip 10,000 lines&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;And a Rocket-Raptor Sky Armageddon action figure&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$present_list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Or, alternatively:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;File::AtomicWrite&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;File::AtomicWrite&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;write_file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;({&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;  &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/etc/wishlist&#39;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$all_i_want&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;To accomodate different levels of paranoia, the module allows for several options, including the directory in which the temporary file is written, the template for the name of said temporary file, optional checksum of the data to be written, the minimal size that data should be (wishlist under 50K? IMPOSSIBLE!), and much, much more. But, and this is the good news, all the hard stuff has been taken off your plate. Now all you need to do is to write to the file (easy) or, in the real world equivalent, find the gift that needs to be appended under the tree (&#38;hellip; okay, maybe not that easy).&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/File::AtomicWrite&#34;&gt;File::AtomicWrite&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-08T00:00:00Z</updated><category term="Perl"/><author><name>Yanick Champoux</name></author></entry><entry><title type="html">Is your code&#38;hellip; Safe?</title><link href="http://perladvent.org/2012/2012-12-07.html"/><id>http://perladvent.org/2012/2012-12-07.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;Today we&#38;#39;ll have a little chat about the &lt;code&gt;Safe&lt;/code&gt; module. What does it do, how does it work and when to use it?&lt;/p&gt;

&lt;h3 id=&#34;The-Purpose&#34;&gt;The Purpose&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Safe&#34;&gt;Safe&lt;/a&gt;&#38;#39;s purpose is to provide a &lt;i&gt;restricted &lt;code&gt;eval()&lt;/code&gt; function&lt;/i&gt; to perl, which will function as the regular &lt;code&gt;eval(STRING)&lt;/code&gt; built-in, except in two important points:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;This restricted &lt;code&gt;eval()&lt;/code&gt; will refuse to compile certain built-ins (the list being customizable, so for example you can prevent compilation of all filesystem access functions, or just some, or none)&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moreover, it will compile code in a separate, quarantined namespace, where the data of your main program will not be accessible.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;The-Example&#34;&gt;The Example&lt;/h3&gt;

&lt;p&gt;Quick, a code example, to see what it looks like:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14.0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Safe&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# create a Safe compartment&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Safe&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw(:base_loop)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;magic&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# First try&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;reval&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q{ 40 + $_ }&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;core&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Safe compilation error: $@&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# Second try&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;reval&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q{ $_++ for 1..40 }&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;core&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Safe compilation error: $@&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In this example we start by creating a fairly restricted Safe compartment, where not only the default set of built-ins is forbidden, but also all loop built-ins (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc.)&lt;/p&gt;

&lt;p&gt;The result of the first try will be 42, since the addition and the variable fetching are still permitted operations. The second try will fail with the error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &#38;#39;foreach loop entry&#38;#39; trapped by operation mask&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;The-Basics&#34;&gt;The Basics&lt;/h3&gt;

&lt;p&gt;There are a couple of points worth noting even in such a small example.&lt;/p&gt;

&lt;p&gt;First, we use the &lt;code&gt;deny()&lt;/code&gt; method to deny more operations than the default set. Safe provides &lt;code&gt;deny()&lt;/code&gt;, &lt;code&gt;permit()&lt;/code&gt;, &lt;code&gt;deny_only()&lt;/code&gt; and &lt;code&gt;permit_only()&lt;/code&gt; to customize this set more finely; you can pass to those methods lists of individual op names (as known to the perl internals) or handy predefined bundles (like &lt;code&gt;:base_loop&lt;/code&gt;). Those bundles are listed in the &lt;code&gt;Opcode&lt;/code&gt; man page.&lt;/p&gt;

&lt;p&gt;Secondly, just like &lt;code&gt;eval()&lt;/code&gt;, a compilation error reported by the &lt;code&gt;reval()&lt;/code&gt; method will be in the &lt;code&gt;$@&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Thirdly, we used &lt;code&gt;$_&lt;/code&gt; in the string we&#38;#39;ve been reval-ing. But the namespaces were supposed to be separated? Did I lie? Of course not, I did not lie, and this isn&#38;#39;t a bug in Safe either. The fact is that &lt;code&gt;$_&lt;/code&gt; is one of the few variables that are &lt;i&gt;shared&lt;/i&gt; by default between the program&#38;#39;s global namespace and the compartment&#38;#39;s one.&lt;/p&gt;

&lt;p&gt;To verify this, change the &#38;quot;first try&#38;quot; lines to this, and observe how the &lt;code&gt;$result&lt;/code&gt; will now be 40 instead of 42:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;our&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# or &#38;quot;my $x = 2&#38;quot;, does not matter&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;reval&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q{ 40 + $x }&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Of course, the list of variables you want to share can be changed, too:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;our&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;share&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;$x&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;reval&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q{ 40 + $x }&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# will now say &#39;42&#39;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can specify that you want to share functions as well, so the reval-ed code will be able to call them. By default, Safe will share the &lt;code&gt;*_&lt;/code&gt; glob (so, &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;@_&lt;/code&gt;, etc.) and a quite long list of built-in functions that are often called behind the scenes (like &lt;code&gt;&#38;amp;UNIVERSAL::isa&lt;/code&gt; or &lt;code&gt;&#38;amp;utf8::downgrade&lt;/code&gt;). Use the Source for the full list, which is perl-version-dependent.&lt;/p&gt;

&lt;h3 id=&#34;The-Details&#34;&gt;The Details&lt;/h3&gt;

&lt;p&gt;So what exactly is this new namespace that Safe is masking &lt;code&gt;main::&lt;/code&gt; under? The &lt;code&gt;root()&lt;/code&gt; method allows you to access it, as in the following example:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;v5.14.0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Safe&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Safe&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$root&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;root namespace name: $root&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$compartment&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;reval&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;q{ $x = 42 }&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;result = $result&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;refs&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;safe&#39;s \$x : &#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$root&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;::x&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# 42 too !&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;On My Machine the &lt;code&gt;root()&lt;/code&gt; method will return the string &lt;code&gt;Safe::Root0&lt;/code&gt; in this example. So consequently the variable introduced as &lt;code&gt;$x&lt;/code&gt; in the evaluated code will be known as &lt;code&gt;$Safe::Root0::x&lt;/code&gt; in the outer program.&lt;/p&gt;

&lt;p&gt;Also, you&#38;#39;ll notice that &lt;code&gt;$x&lt;/code&gt; has been compiled by Safe without fussing about &lt;i&gt;Global symbol &#38;quot;$x&#38;quot; requires explicit package name&lt;/i&gt;: the ambient pragmas are not passed to the &lt;code&gt;reval()&lt;/code&gt;. If you want to enforce strictures in the compilation phase, you have to call &lt;code&gt;reval()&lt;/code&gt; with a second boolean parameter set to true:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $result = $compartment-&#38;gt;reval( q{ our $x = 42 }, 1 );&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;The-Lengths&#34;&gt;The Lengths&lt;/h3&gt;

&lt;p&gt;As you can imagine a popular game is to get Safe execute code that it shouldn&#38;#39;t. Safe goes to some lengths to avoid this. Here are two of those, just to excite your imagination:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Destructor destruction&lt;/i&gt;. Before exiting from a &lt;code&gt;reval()&lt;/code&gt;, Safe will check whether any class gained new methods, and if so, it will delete every &lt;code&gt;DESTROY&lt;/code&gt; and &lt;code&gt;AUTOLOAD&lt;/code&gt; it finds under its root namespace. This is to prevent destructors or functions created inside the department from being run outside of it (for example if the &lt;code&gt;reval()&lt;/code&gt; returns to its caller a newly crafted object).&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Closure closing&lt;/i&gt;. Safe provides a method &lt;code&gt;wrap_code_ref()&lt;/code&gt; that will take a code reference as an argument, and return a version of it wrapped in a &lt;code&gt;reval()&lt;/code&gt; (that&#38;#39;s the short story -- check the source for the gory details). Subsequently, &lt;code&gt;reval()&lt;/code&gt; will check its return values for any code references (recursively, if it returns hash or array references), and will invoke &lt;code&gt;wrap_code_ref()&lt;/code&gt; on any code reference found there before passing them to you.&lt;/p&gt;

&lt;h3 id=&#34;The-Caveats&#34;&gt;The Caveats&lt;/h3&gt;

&lt;p&gt;TL;DR: No silver bullet, etc.&lt;/p&gt;

&lt;p&gt;Longer version (but really it&#38;#39;s just common sense): the name of the Safe module is misleading. If should have been called &lt;code&gt;Restricted::Sortof&lt;/code&gt; or something. It has its uses, but making evaluating foreign code safer is not one of these. Even in a very restricted compartment, it&#38;#39;s possible to introduce a pathologically slow regular expression, or a pathologically long loop, or a pathologically big string. Any use of Safe for serious security purposes is basically misguided.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Safe&#34;&gt;Safe&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-07T00:00:00Z</updated><category term="Perl"/><author><name>Rafa&#235;l Garcia-Suarez</name></author></entry><entry><title>Checking Out Your Data Structures</title><link href="http://perladvent.org/2012/2012-12-06.html"/><id>http://perladvent.org/2012/2012-12-06.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;h2 id=&#34;Have-Your-Variables-Been-Naughty-or-Nice&#34;&gt;Have Your Variables Been Naughty or Nice?&lt;/h2&gt;

&lt;p&gt;Every once in a while you expect your variables to contain a certain value, only to realize, sometimes a bit too late, that something&#38;#39;s off. We&#38;#39;ve all been there, and having a way to quickly and neatly view the contents of your variables can make all the difference in the world.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://metacpan.org/module/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt;, a module that formats and prints your data structures on screen, in a way that lets you easily check them and spot errors. Its output is colored by default, and it also contains several filters to help you debug objects.&lt;/p&gt;

&lt;p&gt;Using it couldn&#38;#39;t be simpler: Data::Printer exports a &lt;code&gt;p()&lt;/code&gt; function to your namespace that you use to dump your data to STDERR (or &lt;a href=&#34;https://metacpan.org/module/Data::Printer#Changing-output-targets&#34;&gt;anywhere else&lt;/a&gt; in fact):&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Data::Printer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$some_variable&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Since it&#38;#39;s a debugging module you&#38;#39;ll likely be turning it on and off everywhere in your code. If that&#38;#39;s the case, a common idiom is to simply add this line when you need to check some data:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;DDP&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$some_variable&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Which takes advantage of &lt;a href=&#34;https://metacpan.org/module/DDP&#34;&gt;DDP&lt;/a&gt;, a shorter alias for Data::Printer.&lt;/p&gt;

&lt;h2 id=&#34;Optimized-for-Humans&#34;&gt;Optimized for Humans&lt;/h2&gt;

&lt;p&gt;Now, if you were using it to view the content of a complex data structure, this is what you might get:&lt;/p&gt;

&lt;table class=&#34;code-listing&#34;&gt;
&lt;tbody&gt;
 &lt;tr&gt;
  &lt;td class=&#34;code&#34; style=&#34;font-weight:normal&#34;&gt;
\ [
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[0]&lt;/span&gt; &#34;&lt;span style=&#34;color:#ff7&#34;&gt;/path/from/env&lt;/span&gt;&#34; &lt;span style=&#34;color:#b11&#34;&gt;(TAINTED)&lt;/span&gt;,
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[1]&lt;/span&gt; [
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[0]&lt;/span&gt; &#34;&lt;span style=&#34;color:#ff7&#34;&gt;foo&lt;/span&gt;&#34;,
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[1]&lt;/span&gt; &#34;&lt;span style=&#34;color:#ff7&#34;&gt;bar&lt;/span&gt;&#34;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;],
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[2]&lt;/span&gt; {
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;name&lt;/span&gt; &#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#34;&#34;,
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;gifts&lt;/span&gt; &#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;background-color:#f00;color:#ccc&#34;&gt;var[1]&lt;/span&gt;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;},
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#fff&#34;&gt;[3]&lt;/span&gt; \ &#34;&lt;span style=&#34;color:#ff7&#34;&gt;Some string reference&lt;/span&gt;&#34; &lt;span style=&#34;color:#01dfa5&#34;&gt;(weak)&lt;/span&gt;
]
  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Did you see what just happened? Not only did Data::Printer show you the contents of your variable in a clear, colored and indented fashion, it also let you see array indices, know about circular references, tainted data, and weak references, and it can detect and describe many more facts about your data!&lt;/p&gt;

&lt;p&gt;But enough about plain data structures. Let&#38;#39;s try it with an object:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;My::Class&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$class&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;bless&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$class&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{}&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;_baz&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{}&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you use Data::Printer on an instance of the class defined above, you&#38;#39;ll see something like this when you dump it:&lt;/p&gt;

&lt;table class=&#34;code-listing&#34;&gt;
&lt;tbody&gt;
 &lt;tr&gt;
  &lt;td class=&#34;code&#34; style=&#34;font-weight:normal&#34;&gt;
&lt;span style=&#34;color:#5f5&#34;&gt;My::Class&lt;/span&gt; {
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;public methods (3) : &lt;span style=&#34;color:#5f5&#34;&gt;bar&lt;/span&gt;,&lt;span style=&#34;color:#5f5&#34;&gt;foo&lt;/span&gt;,&lt;span style=&#34;color:#5f5&#34;&gt;new&lt;/span&gt;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;private methods (1) : &lt;span style=&#34;color:#5f5&#34;&gt;_baz&lt;/span&gt;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;internals: {
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;num&lt;/span&gt; &#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#0a4bac&#34;&gt;42&lt;/span&gt;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}
}
  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Pretty neat, huh? It would even show inheritance if we had any =)&lt;/p&gt;

&lt;h2 id=&#34;Filters&#34;&gt;Filters&lt;/h2&gt;

&lt;p&gt;Another of Data::Printer&#38;#39;s strenghts lies in how it lets you easily filter Perl types and classes. The basic distribution includes formatters for some popular modules like &lt;a href=&#34;https://metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/module/Digest&#34;&gt;Digest&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/module/DBI&#34;&gt;DBI&lt;/a&gt;, so if you have enabled them in your &lt;a href=&#34;https://metacpan.org/module/Data::Printer#CUSTOMIZATION&#34;&gt;settings&lt;/a&gt;, then this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2012&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;dbh&lt;/span&gt;      &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;DBI&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$dsn&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$pass&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;digest&lt;/span&gt;   &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Digest::MD5&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;DDP&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Might show you something like this:&lt;/p&gt;

&lt;table class=&#34;code-listing&#34;&gt;
&lt;tbody&gt;
 &lt;tr&gt;
  &lt;td class=&#34;code&#34; style=&#34;font-weight:normal&#34;&gt;
\ {
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;datetime&lt;/span&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#5f5&#34;&gt;2012-12-25T00:00:00 [floating]&lt;/span&gt;,
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;dbh&lt;/span&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;mysql Database Handle (&lt;span style=&#34;color:#5f5&#34;&gt;connected&lt;/span&gt;) {
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;database: mydb
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;Auto Commit: 1
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;Statement Handles: 0
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;Last Statement: &lt;span style=&#34;color:#ff7&#34;&gt;-&lt;/span&gt;
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;}
&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#b40486&#34;&gt;digest&lt;/span&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span style=&#34;color:#5f5&#34;&gt;d41d8cd98f00b204e9800998ecf8427e [reset]&lt;/span&gt;,
}
  &lt;/td&gt;
 &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notice how, in this example, Data::Printer showed you:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;DateTime objects as formatted strings with the timezone (in this case, &#38;#39;floating&#38;#39;);&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database handles with information regarding connection, current database, amount of active statement handles, last run statement and even extra properties that might influence your program (like &lt;code&gt;AutoCommit&lt;/code&gt;);&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Digest objects (like &lt;a href=&#34;https://metacpan.org/module/Digest::MD5&#34;&gt;Digest::MD5&lt;/a&gt;) as formatted hexdumps, including a mention when, like in the example above, the digest is actually is the one of a reset (empty) element.&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are &lt;a href=&#34;https://metacpan.org/module/Data::Printer::Filter#EXISTING-FILTERS&#34;&gt;several different filters available on CPAN&lt;/a&gt; and you can make some new ones yourself!&lt;/p&gt;

&lt;h2 id=&#34;In-Short&#34;&gt;In Short&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt; is a shiny tool for your Perl utility belt that not only pretty-prints variables, but also provides very useful information regarding your data. It is also extremely easy to tweak to suit your own taste and debugging needs, from colors to formatting to new filters.&lt;/p&gt;

&lt;p&gt;If you&#38;#39;re not using it already, give it a go!&lt;/p&gt;

&lt;/div&gt;</summary><updated>2012-12-06T00:00:00Z</updated><category term="Perl"/><author><name>Breno G. de Oliveira</name></author></entry><entry><title>Reindeer Games</title><link href="http://perladvent.org/2012/2012-12-05.html"/><id>http://perladvent.org/2012/2012-12-05.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;&lt;a href=&#34;http://perldancer.org&#34;&gt;Dancer&lt;/a&gt; is a Perl micro-web framework originally based on Ruby&#38;#39;s &lt;a href=&#34;http://www.sinatrarb.com&#34;&gt;Sinatra&lt;/a&gt;. Its status as a micro-framework means, amongst other things, that it is a very nimble creature, and can be thus showed many nifty tricks.&lt;/p&gt;

&lt;h2 id=&#34;Have-Your-Party-MCed-by-One-of-Santas-Close-Collaborator&#34;&gt;Have Your Party MC&#38;#39;ed by One of Santa&#38;#39;s Close Collaborator&lt;/h2&gt;

&lt;p&gt;It doesn&#38;#39;t take a lot of boilerplate to create a minimalistic web service with &lt;code&gt;Dancer&lt;/code&gt;. For example, want to have a web service returning a random song in the current directory to help the party&#38;#39;s DJ? There we go:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/perl&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;pragma&#34;&gt;autodie&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;List::Util&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw/ shuffle /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;MP3::Info&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/song&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;opendir&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;shuffle&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/\.mp3$/&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;readdir&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$song&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;MP3::Info&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;sprintf&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;%s (%s)&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$song&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$song&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;artist&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;dance&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The result is bare-bone, but oh-so-wonderfully functional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl next_song.pl
    &#38;gt;&#38;gt; Dancer 1.311 server 6046 listening on http://0.0.0.0:3000
    == Entering the development dance floor ...

    # meanwhile, on the DJ side
    $ curl http://localhost:3000/song
    01 A Tap Dancer&#38;#39;s Dilemma (DIABLO SWING ORCHESTRA)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Shorter&#34;&gt;Shorter!&lt;/h2&gt;

&lt;p&gt;Can we make this shorter? You bet we can. For example, to be able to create mini-web services that only answer to their index route, we can create the module &lt;i&gt;C.pm&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;::main&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;:syntax&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;END&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&#38;gt;&lt;/span&gt; &lt;span class=&#34;cast&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;&#38;amp;::index&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;&#38;amp;::index&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;dance&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And voil&#38;agrave;, make room for your new MC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl -MC -MMP3::Info -e&#38;#39;sub index{@s=&#38;lt;*.mp3&#38;gt;;$s[rand@s];}&#38;#39;
    &#38;gt;&#38;gt; Dancer 1.311 server 6046 listening on http://0.0.0.0:3000
    == Entering the development dance floor ...

    # meanwhile, on the DJ side
    $  curl http://localhost:3000/
    01 - 01 A Tap Dancer&#38;#39;s Dilemma.mp3&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Even-shorter&#34;&gt;Even shorter!&lt;/h2&gt;

&lt;p&gt;Can we make this even shorter? Maybe slurp on simple scripts present in sub-directories and convert them into web service routes? My, but of course:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;br /&gt;22:&#38;nbsp;&lt;br /&gt;23:&#38;nbsp;&lt;br /&gt;24:&#38;nbsp;&lt;br /&gt;25:&#38;nbsp;&lt;br /&gt;26:&#38;nbsp;&lt;br /&gt;27:&#38;nbsp;&lt;br /&gt;28:&#38;nbsp;&lt;br /&gt;29:&#38;nbsp;&lt;br /&gt;30:&#38;nbsp;&lt;br /&gt;31:&#38;nbsp;&lt;br /&gt;32:&#38;nbsp;&lt;br /&gt;33:&#38;nbsp;&lt;br /&gt;34:&#38;nbsp;&lt;br /&gt;35:&#38;nbsp;&lt;br /&gt;36:&#38;nbsp;&lt;br /&gt;37:&#38;nbsp;&lt;br /&gt;38:&#38;nbsp;&lt;br /&gt;39:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;version&#34;&gt;5.10.0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw/ dir /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;::main&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Dancer&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;:syntax&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;traverse&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$child&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cont&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cont&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$child&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$route&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$method&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$child&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^(.*)\.(get|post|put)$/&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$route&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;substitute&#34;&gt;s/^\.//&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$route&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;substitute&#34;&gt;s#^#/#&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$route&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;substitute&#34;&gt;s/SPLAT/*/g&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;adding route &#39;$route&#39;&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;heredoc&#34;&gt;&#38;lt;&#38;lt;&#38;quot;END_ROUTE&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;heredoc_content&#34;&gt;$method &#39;$route&#39; =&#38;gt; sub {&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;\@_ = \@ARGV = splat;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;local \*STDOUT;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;open STDOUT, &#39;&#38;gt;&#39;, \\my \$output;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;{ @{[ $child-&#38;gt;slurp ]} };&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;return \$output;&lt;br /&gt;};&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;heredoc_terminator&#34;&gt;END_ROUTE&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;couldn&#39;t compile route &#39;$child&#39;: $@&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;END&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;dance&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And with that MC on steroid, we can now have auto-web-serviceable perl scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ cat song.get
    use List::Util qw/ shuffle /;
    use MP3::Info;

    opendir my $dir, &#38;#39;.&#38;#39;;
    my ( $file ) = shuffle grep { /\.mp3$/ } readdir $dir;
    my $song = MP3::Info-&#38;gt;new($file);

    printf &#38;quot;%s (%s)&#38;quot;, $song-&#38;gt;title, $song-&#38;gt;artist;

    $ cat request/SPLAT.put
    use 5.10.0;

    open my $request_fh, &#38;#39;&#38;gt;&#38;gt;&#38;#39;, &#38;#39;requests&#38;#39;;

    my $song = shift;

    say {$request_fh} $song;

    say &#38;quot;song &#38;#39;$song&#38;#39; added to the list&#38;quot;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which can be used from the command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl song.get
    01 A Tap Dancer&#38;#39;s Dilemma (DIABLO SWING ORCHESTRA)

    $ perl request/SPLAT.put &#38;quot;Rudoplh The Red-Nosed Reindeer&#38;quot;
    song &#38;#39;Rudoplh The Red-Nosed Reindeer&#38;#39; added to the list&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, once the MC is roused,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perl -MC -e1
    adding route &#38;#39;/request/*&#38;#39;
    adding route &#38;#39;/song&#38;#39;
    &#38;gt;&#38;gt; Dancer 1.311 server 6586 listening on http://0.0.0.0:3000
    == Entering the development dance floor ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the Holidays are suddenly all Web 2.0-ified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl http://localhost:3000/song
    01 A Tap Dancer&#38;#39;s Dilemma (DIABLO SWING ORCHESTRA)

    $ curl -X PUT http://localhost:3000/request/Rudolf_the_red_nosed_reindeer
    song &#38;#39;Rudolf_the_red_nosed_reindeer&#38;#39; added to the list&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dancer&#34;&gt;Dancer&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2012&#34;&gt;the 2012 Perl Dancer Advent Calendar&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-05T00:00:00Z</updated><category term="Perl"/><author><name>Yanick Champoux</name></author></entry><entry><title>Which Library Broke?</title><link href="http://perladvent.org/2012/2012-12-04.html"/><id>http://perladvent.org/2012/2012-12-04.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;The CPAN is built on a few key principles that make it such a success. One of them is that you don&#38;#39;t have to write every part of the library you want to write. You can declare that it depends on some other preexisting library, and that library will be found and installed. Still, there&#38;#39;s sometimes a cultural pressure to require as few prerequisites as to require as old a version as possible. In other words, it&#38;#39;s often preferable to avoid making anybody install or upgrade anything. On the other hand, it&#38;#39;s also frowned upon to put an upper limit on versions. (Actually, it&#38;#39;s technically difficult to specify a bounded range, so those frowns are redundant and maybe I just made them up.)&lt;/p&gt;

&lt;p&gt;Keeping track of what versions you &lt;i&gt;actually need&lt;/i&gt;, then, often works like this:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;&lt;p&gt;declare that you need version 0&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wait for somebody to tell you things aren&#38;#39;t working&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;figure out what prerequisite library versions are unusual&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ask the user to upgrade or downgrade libraries until it works&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;adjust the listed prequisites&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem here is #3. It&#38;#39;s a pain for the reporting user to go compile his installed versions, and it&#38;#39;s a pain to do it yourself for comparison. On the bright side, the CPAN Testers, who can never be sufficiently thanked for their contributions to the CPAN, usually submit reports that include all the data needed here. You can look at &lt;a href=&#34;http://cpantesters.org/cpan/report/05bc2cdc-4481-11e1-9d6f-f6dbfa7543f5&#34;&gt;almost any random report&lt;/a&gt; and find the prerequisites listed, both as they were requested and as they were found. That&#38;#39;s great, if you&#38;#39;re getting reports from CPAN smoke bots. It doesn&#38;#39;t cover everybody else.&lt;/p&gt;

&lt;p&gt;For everybody else, the trick is to write a little program that prints out a table like the one in the tester&#38;#39;s report: for each prereq, it shows the requested and found version of the module. &lt;a href=&#34;http://cpansearch.perl.org/src/DOLMEN/Dist-Zilla-Plugin-ReportVersions-Tiny-1.08/t/000-report-versions-tiny.t&#34;&gt;A program to do that&lt;/a&gt; is simple, but sort of a tedious pain to write. As with almost anything useful but boring, there&#38;#39;s a &lt;a href=&#34;https://metacpan.org/module/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; plugin to do it for you.&lt;/p&gt;

&lt;p&gt;Actually, there are several.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::ReportVersions::Tiny&#34;&gt;Dist::Zilla::Plugin::ReportVersions::Tiny&lt;/a&gt; spits out a &lt;i&gt;000-report-versions-tiny.t&lt;/i&gt; file like the one linked to above. One of the best things about that plugin is that it generates a test program with no extra prerequisites. It produces a simple, useful program that you can bundle along with your distribution, and whose output will be included, by default, with any test run, and there&#38;#39;s no &#38;quot;cost&#38;quot; in more prereqs for the installing user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::Test::ReportPrereqs&#34;&gt;Dist::Zilla::Plugin::Test::ReportPrereqs&lt;/a&gt; does much the same job, but lets you tweak the list a bit to add other libraries you know you care about that aren&#38;#39;t otherwise in your module list &#38;mdash; but it doesn&#38;#39;t include the requested version in its output, and only runs if the &lt;code&gt;AUTOMATED_TESTING&lt;/code&gt; environment variable is set.&lt;/p&gt;

&lt;p&gt;Even if the reporting user isn&#38;#39;t sending a &#38;quot;real&#38;quot; CPAN Testers report, it&#38;#39;s easy to get the table you need. Just ask the user to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ perl -Mblib t/000-report-versions-tiny.t | nopaste&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Everybody has &lt;a href=&#34;http://perladvent.org/2011/2011-12-14.html&#34;&gt;nopaste&lt;/a&gt; installed, right?)&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::ReportVersions::Tiny&#34;&gt;Dist::Zilla::Plugin::ReportVersions::Tiny&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Dist::Zilla::Plugin::Test::ReportPrereqs&#34;&gt;Dist::Zilla::Plugin::Test::ReportPrereqs&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-04T00:00:00Z</updated><category term="Perl"/><author><name>Ricardo Signes</name></author></entry><entry><title>Sleigh Upgrade</title><link href="http://perladvent.org/2012/2012-12-03.html"/><id>http://perladvent.org/2012/2012-12-03.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;Santa&#38;#39;s little helpers had just completed an upgrade to his fleet of sleighs. Ruldoph was getting tired of lighting the way each night, and wanted a year off, so they&#38;#39;d &lt;i&gt;finally&lt;/i&gt; fitted some headlights. They&#38;#39;d also updated their code to turn them on and off again automatically (so the batteries didn&#38;#39;t wear out) whenever Santa took off:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;fly_to_next_house&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lights&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;set_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cast&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;nice_list&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;fly_to_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lights&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&#38;quot;I like it,&#38;quot; said Santa, &#38;quot;but what happens though if the GPS doesn&#38;#39;t know where the address is?&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;Hmmm&#38;quot;, said the wise old elf, &#38;quot;well, it is running Apple Maps so I guess there &lt;i&gt;might&lt;/i&gt; be a problem&#38;quot;. &#38;quot;But&#38;quot;, he continued, &#38;quot;not to worry. The set_destination method throws an exception and there&#38;#39;s some &lt;i&gt;terribly&lt;/i&gt; complicated code that catches it and deals with it in the routine that calls &lt;code&gt;fly_to_next_house&lt;/code&gt;.&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;Ha! The elves just look it up on Google Maps you mean.&#38;quot;, Santa laughed, &#38;quot;Though that&#38;#39;s not what I&#38;#39;m on about. Look: If the GPS throws an exception, can&#38;#39;t you see the &lt;b&gt;lights never get turned off&lt;/b&gt; because the code to do so won&#38;#39;t be executed?&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;Oh crumbs&#38;quot;, the elf conceded, &#38;quot;well, I guess we could use a localized variable to set the lights. Those are automatically unset at the end of the current scope no matter what - even if you do exit by an exception!&#38;quot;&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;fly_to_next_house&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$Sliegh::Lights&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;set_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cast&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;nice_list&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;fly_to_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Santa stroked his beard for a few minutes. Then he shook his head. &#38;quot;No, that&#38;#39;s not going to work. For a starters you&#38;#39;ve mistyped &#38;#39;Sleigh,&#38;#39; and since there&#38;#39;s no error with misspelled fully qualified variables, the sleigh will end up flying me in the dark! Even if you fix that, this isn&#38;#39;t going to work with one single variable controlling all the lights on every one of my sleighs.&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;Oh, good point, &#38;quot;how about this then?&#38;quot;&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;fly_to_next_house&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;turn_lights_on_till_end_of_scope&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;set_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cast&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;nice_list&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;sleigh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;fly_to_destination&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;gps&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&#38;quot;That&#38;#39;s great! How did you do that?&#38;quot;&lt;/p&gt;

&lt;p&gt;&#38;quot;Well, that&#38;#39;s why they call me the &lt;i&gt;Wise&lt;/i&gt; Old Elf&#38;quot;&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Sleigh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Scope::Upper&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw(reap UP)&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;turn_lights_on_till_end_of_scope&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;core&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;  # turn on the lights&lt;br /&gt;&lt;/span&gt;  &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lights&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;  # and turn them off again we exit our caller&#39;s scope&lt;br /&gt;&lt;/span&gt;  &lt;span class=&#34;word&#34;&gt;reap&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$self&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;lights&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;UP&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Scope::Upper&#34;&gt;Scope::Upper&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-03T00:00:00Z</updated><category term="Perl"/><author><name>Mark Fowler</name></author></entry><entry><title>My Favorite Pies</title><link href="http://perladvent.org/2012/2012-12-02.html"/><id>http://perladvent.org/2012/2012-12-02.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;I like pie.&lt;/p&gt;

&lt;p&gt;I prefer pie to cake, and within the realm of pies, I have a few favorites. Almost certainly, my favorite pie is &lt;a href=&#34;http://en.wikipedia.org/wiki/Pumpkin_pie&#34;&gt;pumpkin pie&lt;/a&gt;. When I learned that it&#38;#39;s primarily an American dessert, and had a few Brits tell me that making something sweet from pumpkin sounded awful&#38;hellip; well, I was pretty broken up about those poor lost souls.&lt;/p&gt;

&lt;p&gt;Pumpkin pie isn&#38;#39;t much of a Christmas treat, though. At Christmas, I might be more likely to get a slice of &lt;a href=&#34;http://en.wikipedia.org/wiki/Chess_pie&#34;&gt;chess pie&lt;/a&gt;. Chess pie is even more American, and mostly found in the South. It&#38;#39;s pretty much eggs, sugar, more sugar, and vinegar. Some people call it &#38;quot;vinegar pie.&#38;quot; Trust me, it&#38;#39;s better than it sounds.&lt;/p&gt;

&lt;p&gt;Chess pie is good stuff, but I&#38;#39;m sort of expected to write something about &lt;i&gt;Perl&lt;/i&gt; today, so I&#38;#39;m going to write about &lt;i&gt;Perl pie&lt;/i&gt;. Perl pies are a great treat. They&#38;#39;re good for you, they&#38;#39;re easy to make, and they require very little Perl expertise to make.&lt;/p&gt;

&lt;h3 id=&#34;I-dont-want-to-put-Perl-in-my-mouth&#34;&gt;I don&#38;#39;t want to put Perl in my mouth.&lt;/h3&gt;

&lt;p&gt;I don&#38;#39;t either! Also, no baking is going to be required, and we&#38;#39;re certainly not going to make anything in a microwave.&lt;/p&gt;

&lt;h3 id=&#34;Okay-then-carry-on&#34;&gt;Okay, then, carry on.&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlrun&#34;&gt;Perl&#38;#39;s command line switches&lt;/a&gt; are pretty darn cool. Last year, I wrote about &lt;a href=&#34;http://perladvent.org/2011/2011-12-05.html&#34;&gt;the -M switch&lt;/a&gt; and some tricks you could pull with it. There are lots of poorly-known switches that can be put to great use, in there. I&#38;#39;d love to cover them all, but for now I&#38;#39;m going to start with &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&#38;#39;s imagine we&#38;#39;ve got some input file, &lt;i&gt;file.txt&lt;/i&gt;:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;Alfa&lt;br /&gt;Bravo&lt;br /&gt;Charlie&lt;br /&gt;Delta&lt;br /&gt;Echo&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; switch implicitly wraps our program in a loop like this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;label&#34;&gt;LINE:&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;readline&#34;&gt;&#38;lt;&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;  # your program goes here&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This is great for doing things you might otherwise do with &lt;code&gt;awk&lt;/code&gt; or &lt;code&gt;sed&lt;/code&gt;. I haven&#38;#39;t used either of those in years, because of &lt;code&gt;perl&lt;/code&gt;. For example, we could write this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/perl -n&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;bogus first character&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/\A[A-Z]/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;substitute&#34;&gt;s/\A(.)\K/ is the abbreviation for $1/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;...to get...&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;A is the abbreviation for Alfa&lt;br /&gt;B is the abbreviation for Bravo&lt;br /&gt;C is the abbreviation for Charlie&lt;br /&gt;D is the abbreviation for Delta&lt;br /&gt;E is the abbreviation for Echo&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In fact, in my experience almost all programs I&#38;#39;d write with &lt;code&gt;-n&lt;/code&gt; end with &lt;code&gt;print&lt;/code&gt;, so I never use &lt;code&gt;-n&lt;/code&gt;. Instead, I use &lt;code&gt;-p&lt;/code&gt;, which is exactly the same but adds:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;die&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;-p destination: $!\n&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The general idea is that now your program is a set of transformations on repeated input, and that you&#38;#39;re just editing the stream as it goes by, line by line. It&#38;#39;s quite sed-y.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; switches are both usable on the shebang line, but they&#38;#39;re rarely seen there &#38;mdash; it&#38;#39;s pretty easy to type the loop out when you&#38;#39;re making a program that you&#38;#39;re going to keep around a while. They&#38;#39;re much more commonly seen in one-liners with the famous and beloved &lt;code&gt;-e&lt;/code&gt; (or its younger brother &lt;code&gt;-E&lt;/code&gt;). Does your system lack &lt;code&gt;nl&lt;/code&gt; for numbering lines? No problem:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;~$ perl -pe &#38;#39;printf &#38;quot;%6u: &#38;quot;, $.&#38;#39; file.txt&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;1: Alfa&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;2: Bravo&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;3: Charlie&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;4: Delta&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;5: Echo&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;(Remember &lt;code&gt;$.&lt;/code&gt;? It&#38;#39;s (mostly) the current line number of the file you&#38;#39;re reading.)&lt;/p&gt;

&lt;p&gt;Somebody deleted &lt;code&gt;grep&lt;/code&gt;? And &lt;a href=&#34;https://metacpan.org/module/ack&#34;&gt;ack&lt;/a&gt;? Will, it sounds like you&#38;#39;ve got some personnel problems to deal with, but in the meantime, okay:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;~$ perl -ne &#38;#39;print &#38;quot;$.: $_&#38;quot; if /l/&#38;#39; file.txt&lt;br /&gt;1: Alfa&lt;br /&gt;3: Charlie&lt;br /&gt;4: Delta&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Note that while we &lt;i&gt;could&lt;/i&gt; have used &lt;code&gt;-n&lt;/code&gt; in writing the first example, replacing &lt;code&gt;sprintf&lt;/code&gt; with &lt;code&gt;printf&lt;/code&gt;, but we &lt;i&gt;had to&lt;/i&gt; use &lt;code&gt;-n&lt;/code&gt; in the second example! Because the &lt;code&gt;print&lt;/code&gt; is in a &lt;code&gt;continue&lt;/code&gt;, you can&#38;#39;t avoid printing by using &lt;code&gt;next&lt;/code&gt;. For that, we must stick to &lt;code&gt;-n&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;I-was-told-there-would-be-pie&#34;&gt;I was told there would be pie.&lt;/h3&gt;

&lt;p&gt;Yes, well&#38;hellip; from &lt;code&gt;-p&lt;/code&gt; and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-e&lt;/code&gt;, we can make a Perl &lt;i&gt;pen&lt;/i&gt;, but not a pie. For pie, we&#38;#39;re obviously going to need some &lt;code&gt;-i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; switch will be familiar to &lt;code&gt;sed&lt;/code&gt;-loving grognards. It lets us edit files on disk, using any value given to the switch as a backup file extension. So:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;~$ cat file.txt&lt;br /&gt;Alfa&lt;br /&gt;Bravo&lt;br /&gt;Charlie&lt;br /&gt;Delta&lt;br /&gt;Echo&lt;br /&gt;~$ perl -p -i.bak -e &#38;#39;s/[a-z]/-/g&#38;#39; file.txt&lt;br /&gt;~$ cat file.txt&lt;br /&gt;A---&lt;br /&gt;B----&lt;br /&gt;C------&lt;br /&gt;D----&lt;br /&gt;E---&lt;br /&gt;~$ cat file.txt.bak&lt;br /&gt;Alfa&lt;br /&gt;Bravo&lt;br /&gt;Charlie&lt;br /&gt;Delta&lt;br /&gt;Echo&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now, using an argument to &lt;code&gt;-i&lt;/code&gt; is a &lt;i&gt;very&lt;/i&gt; good idea. Perl&#38;#39;s handling of I/O errors when dealing with files with &lt;code&gt;-i&lt;/code&gt; isn&#38;#39;t the best, and you can lose data if you (or your operating system) screws up. That said&#38;hellip; I don&#38;#39;t think I ever actually use &lt;i&gt;.bak&lt;/i&gt; or anything like that. That&#38;#39;s what &lt;code&gt;git&lt;/code&gt; is for, right? In my use, the most important reasons to know about that &lt;i&gt;.bak&lt;/i&gt; option are (1) to inform other users so that I have plausible deniability when they ruin their unrecoverable data and (2) to remember that &lt;b&gt;you cannot write &lt;code&gt;perl -pie&lt;/code&gt;&lt;/b&gt;. That&#38;#39;s why Perl pies look like this:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;$ perl -pi -e &#38;#39;s/../.../&#38;#39; input.txt&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id=&#34;Now-bake-me-a-pie&#34;&gt;Now bake me a pie!&lt;/h2&gt;

&lt;p&gt;I use Perl pies quite often, especially for doing mechanical refactoring of code. For example, let&#38;#39;s say that I&#38;#39;ve done a bunch of work on making a library called Pumpkin::Walnut, and it&#38;#39;s got a number of associated subclasses, and there&#38;#39;s Pumpkin::WalnutX, etc. It turns out that for legal reasons, we can&#38;#39;t call it Walnut and have to rebrand the whole thing as Pumpkin::Filbert. First we do a bit of renaming of the files in &lt;i&gt;lib&lt;/i&gt;, possibly using &lt;a href=&#34;http://perladvent.org/2011/2011-12-18.html&#34;&gt;rename&lt;/a&gt;, and then muck about in the files themselves:&lt;/p&gt;

&lt;p&gt;This is a piece of cake (so to speak):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ perl -pi -e &#38;#39;s/Pumpkin::Walnut/Pumpkin::Filbert/g&#38;#39; $(find lib -type f)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...then review for absurdity by consulting &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding editor hints to your files is trivial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ perl -pi -e &#38;#39;print &#38;quot;%# vim: ft=mason:\n&#38;quot; unless $did{$ARGV}++&#38;#39; $(find mason -type f)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can fix wonky newlines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ perl -pi -e &#38;#39;s/\x0A?\x0D/\n/g&#38;#39; file.txt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...and of course you can do all sorts of things &lt;i&gt;other&lt;/i&gt; than &lt;code&gt;s///&lt;/code&gt;. Here&#38;#39;s a longer-form of a one-liner I keep lying around:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;~$ cat numbers.csv&lt;br /&gt;5,7,7,9,14,13,9,3,0,6&lt;br /&gt;18,6,17,15,5,19,2,0,16,12&lt;br /&gt;5,3,5,5,9,13,19,13,4,17&lt;br /&gt;16,16,14,1,10,2,10,2,11,9&lt;br /&gt;15,1,14,14,18,12,4,10,16,16&lt;br /&gt;&lt;br /&gt;~$ perl -MList::Util=sum -ani -F, -E &#38;#39;say sum @F&#38;#39; numbers.csv&lt;br /&gt;~$ cat numbers.txt&lt;br /&gt;73&lt;br /&gt;110&lt;br /&gt;93&lt;br /&gt;91&lt;br /&gt;120&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It&#38;#39;s a lot of fun to write big applications in Perl, using all the other libraries we talk about every other day on the Perl Advent Calendar, but sticking to plain old core Perl is still a pretty sweet way to solve tons of everyday problems.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/perlrun&#34;&gt;perlrun&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-02T00:00:00Z</updated><category term="Perl"/><author><name>Ricardo Signes</name></author></entry><entry><title>Sweet Path::Class is Coming to Town</title><link href="http://perladvent.org/2012/2012-12-01.html"/><id>http://perladvent.org/2012/2012-12-01.html</id><summary type="html">&lt;div class=&#39;pod&#39;&gt;&lt;p&gt;File and directory paths. They start off so simple, but then depending on which system the script runs on, they might use slashes or backslashes. And then there are spaces that come to mess everything up. And then there are those systems that use drive letters and volume names. And so on, and so forth.&lt;/p&gt;

&lt;p&gt;You know what? Give yourself the gift of simplicity these holidays, and begin to use &lt;a href=&#34;https://metacpan.org/module/Path::Class&#34;&gt;Path::Class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Path::Class wraps all those file and directory operations in object-oriented goodness that will warm your DWIM-hungry little heart.&lt;/p&gt;

&lt;p&gt;To begin with, creating the objects is pretty straight-forward:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;Path::Class&lt;/span&gt; &lt;span class=&#34;words&#34;&gt;qw/ file dir /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw/ home santa children naughty /&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# could also have done&lt;br /&gt;# my $dir = dir( &#39;/home/santa/children/naughty&#39; );&lt;br /&gt;# and Path::Class would have understood&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw/ home santa children naughty yanick /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# or simply&lt;br /&gt;#my $entry = $dir-&#38;gt;file(&#39;yanick&#39;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And because the &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;file&lt;/code&gt; objects auto-stringify to their representing strings, it means that you can use them just like any regular path strings:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;Uh oh&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;opendir&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;there are %d naughty children in this directory\n&#38;quot;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;scalar&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/^\.\.$/&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;readdir&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dh&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;But as soon you discover the methods those objects have, you&#38;#39;ll &lt;i&gt;soooo&lt;/i&gt; not want to do that. Traveling up and down directory structures will now be a joy:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# down&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$subdir&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;subdir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;really_naughty&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# up and down&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$good_ones&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;subdir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;nice&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;by the by, it&#39;s a relative path&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;is_relative&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Cleaning up complicated paths? A wonder:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;single&#34;&gt;&#39;/home/santa/../santa////children/.//nice&#39;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# yes, prints &#39;/home/santa/children/nice&#39;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Utilities and shortcuts to create tempfiles, iterate through the directory entries or traverse the directory structure? All there:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;comment&#34;&gt;# create a temporary file&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$wishlist_fh&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$wishlist_filename&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;tempfile&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$wishlist_fh&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;I want a $_&#38;quot;&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@gift_ideas&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# read the directory&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$naughty_child&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$naughty_dir&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;symbol&#34;&gt;$naughty_child&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;remove&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$naughty_child&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/yanick|rjbs/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# go gift hunting&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@hidden&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw/ dev rooms /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;traverse&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cont&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;magic&#34;&gt;@_&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;    # grab any gift file&lt;br /&gt;&lt;/span&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$cont&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$entry&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=~&lt;/span&gt; &lt;span class=&#34;match&#34;&gt;/\.gift$/&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Regular file operations are likewise simplified via nifty methods:&lt;/p&gt;

&lt;table class=&#39;code-listing&#39;&gt;&lt;tr&gt;&lt;td class=&#39;line-numbers&#39;&gt;&lt;br /&gt;&lt;code&gt;1:&#38;nbsp;&lt;br /&gt;2:&#38;nbsp;&lt;br /&gt;3:&#38;nbsp;&lt;br /&gt;4:&#38;nbsp;&lt;br /&gt;5:&#38;nbsp;&lt;br /&gt;6:&#38;nbsp;&lt;br /&gt;7:&#38;nbsp;&lt;br /&gt;8:&#38;nbsp;&lt;br /&gt;9:&#38;nbsp;&lt;br /&gt;10:&#38;nbsp;&lt;br /&gt;11:&#38;nbsp;&lt;br /&gt;12:&#38;nbsp;&lt;br /&gt;13:&#38;nbsp;&lt;br /&gt;14:&#38;nbsp;&lt;br /&gt;15:&#38;nbsp;&lt;br /&gt;16:&#38;nbsp;&lt;br /&gt;17:&#38;nbsp;&lt;br /&gt;18:&#38;nbsp;&lt;br /&gt;19:&#38;nbsp;&lt;br /&gt;20:&#38;nbsp;&lt;br /&gt;21:&#38;nbsp;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$list&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;words&#34;&gt;qw/ home yanick xmas list /&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# read the whole file, split it in lines&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@wishlist&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;slurp&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;substitute&#34;&gt;s/$/ pretty please/&lt;/span&gt; &lt;span class=&#34;word&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;@wishlist&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# doesn&#39;t hurt to be polite&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# and write back to the file&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;$list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;spew&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;symbol&#34;&gt;@wishlist&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# if one wants a filehandle...&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$fh&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$list&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;openr&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# open for reading&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;$wish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;readline&#34;&gt;&#38;lt;$fh&#38;gt;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;){&lt;/span&gt;&lt;br /&gt;&#38;nbsp;&#38;nbsp;&#38;nbsp;&#38;nbsp;&lt;span class=&#34;word&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;double&#34;&gt;&#38;quot;I want a $wish&#38;quot;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;structure&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# want to touch a file?&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;/home/santa/helpers/glug&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;touch&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;comment&#34;&gt;# or remove one?&lt;br /&gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;single&#34;&gt;&#39;/home/santa/helpers/Belsnickel&#39;&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;-&#38;gt;&lt;/span&gt;&lt;span class=&#34;word&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;structure&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&#38;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Trust me, once you begin using them, there&#38;#39;ll be no going back. In fact, you&#38;#39;ll probably wish they were also available as &lt;a href=&#34;https://metacpan.org/module/Moose&#34;&gt;Moose&lt;/a&gt; types to use them everywhere natively.&lt;/p&gt;

&lt;p&gt;And then you&#38;#39;ll discover &lt;a href=&#34;https://metacpan.org/module/MooseX::Types::Path::Class&#34;&gt;MooseX::Types::Path::Class&lt;/a&gt;, and the Christmas bells will be forevermore ringing.&lt;/p&gt;

&lt;h2 id=&#34;See-Also&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Path::Class&#34;&gt;Path::Class&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/MooseX::Types::Path::Class&#34;&gt;MooseX::Types::Path::Class&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/File::Spec&#34;&gt;File::Spec&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/File::Path&#34;&gt;File::Path&lt;/a&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</summary><updated>2012-12-01T00:00:00Z</updated><category term="Perl"/><author><name>Yanick Champoux</name></author></entry></feed>