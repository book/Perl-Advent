Title: Here(doc) it is Merry Christmas
Topic: Modern Heredocs
Author: Mark Fowler <mark@twoshortplanks.com>

The Wise Old Elf was doing code review for Sloeberry Snoozyflakes, one of the
newest elves on his team.

Slowberry was writing a simple routine to count the number of nice children
there were this year, in order to get an estimate of the number of presents
that Santa would need to deliver.

    #!vim perl
    sub number_of_children {
        my $self            = shift;
        my $naughty_or_nice = shift;

        my $sql = "SELECT count(*)\n" .
                  "  FROM children\n" .
                  "  WHER naughty_or_nice = \$1";

        my $dbh = $self->database_handle;
        return $dbh->selectall_arrayref($sql,{},$naughty_or_nice)->[0];
    }

"That multi-line sql assignment is a little hard to read.", the Wise Old Elf
commented. "Could we change it to make it cleaner?"

Slowberry changed his code to use a heredoc:

    #!vim perl
    sub number_of_children {
        my $self            = shift;
        my $naughty_or_nice = shift;

        my $sql = <<END
           SELECT count(*)
             FROM children
             WHER naughty_or_nice = \$1
    END

        my $dbh = $self->database_handle;
        return $dbh->selectall_arrayref($sql,{},$naughty_or_nice)->[0];
    }

"That's better," the elf continued, "but if you'd used C<SQL> as the heredoc
deliminator rather than than C<TEXT>, then your editor would probably enable
syntax highlighting, and you'd probably have noticed that you typo-ed C<WHERE>."

=for html
  <table class='code-listing'><tr><td class='line-numbers'><br /><code>1:&nbsp;<br />2:&nbsp;<br />3:&nbsp;<br />4:&nbsp;<br />5:&nbsp;<br />6:&nbsp;<br />7:&nbsp;<br />8:&nbsp;<br />9:&nbsp;<br />10:&nbsp;<br />11:&nbsp;<br />12:&nbsp;<br />13:&nbsp;</code><br />&nbsp;</td><td class='code'><br /><code><span class="synStatement">sub </span><span class="synIdentifier">number_of_children </span>{<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$self</span>            = <span class="synStatement">shift</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$naughty_or_nice</span> = <span class="synStatement">shift</span>;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$sql</span> = <span class="synConstant">&lt;&lt;SQL</span><br /><span class="synStatement">       SELECT</span> count(*)<br />&nbsp;&nbsp;<span class="synStatement">       FROM</span> children<br />&nbsp;<span class="synStatement">       WHERE</span> naughty_or_nice = $<span class="synConstant">1</span><br /><span class="synConstant">SQL</span><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$dbh</span> = <span class="synIdentifier">$self-&gt;database_handle</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">return</span> <span class="synIdentifier">$dbh-&gt;selectall_arrayref</span>(<span class="synIdentifier">$sql</span>,{},<span class="synIdentifier">$naughty_or_nice</span>)-&gt;[<span class="synConstant">0</span>];<br />}</code><br />&nbsp;</td></table>

"Not bad, but you probably should put single quotes around the first heredoc
deliminator so you don't have escape that C<$>.  In fact you should always put
C<"> or C<'> around the heredoc deliminator just to make it clear to whoever
is reading your code what you actually meant."

=for html
  <table class='code-listing'><tr><td class='line-numbers'><br /><code>1:&nbsp;<br />2:&nbsp;<br />3:&nbsp;<br />4:&nbsp;<br />5:&nbsp;<br />6:&nbsp;<br />7:&nbsp;<br />8:&nbsp;<br />9:&nbsp;<br />10:&nbsp;<br />11:&nbsp;<br />12:&nbsp;<br />13:&nbsp;</code><br />&nbsp;</td><td class='code'><br /><code><span class="synStatement">sub </span><span class="synIdentifier">number_of_children </span>{<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$self</span>            = <span class="synStatement">shift</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$naughty_or_nice</span> = <span class="synStatement">shift</span>;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$sql</span> = <span class="synConstant">&lt;&lt;'SQL'</span><br /><span class="synStatement">       SELECT</span> count(*)<br />&nbsp;&nbsp;<span class="synStatement">       FROM</span> children<br />&nbsp;<span class="synStatement">       WHERE</span> naughty_or_nice = $<span class="synConstant">1</span><br /><span class="synConstant">SQL</span><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$dbh</span> = <span class="synIdentifier">$self-&gt;database_handle</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">return</span> <span class="synIdentifier">$dbh-&gt;selectall_arrayref</span>(<span class="synIdentifier">$sql</span>,{},<span class="synIdentifier">$naughty_or_nice</span>)-&gt;[<span class="synConstant">0</span>];<br />}</code><br />&nbsp;</td></table>

"Pretty good.  The terminating heredoc deliminator looks weird all over there
on the left hand side, not indented like the rest of the subroutine.  We're
using Perl 5.26, so we can add a tilde in the heredoc syntax to allow us to
indent."

=for html
  <table class='code-listing'><tr><td class='line-numbers'><br /><code>1:&nbsp;<br />2:&nbsp;<br />3:&nbsp;<br />4:&nbsp;<br />5:&nbsp;<br />6:&nbsp;<br />7:&nbsp;<br />8:&nbsp;<br />9:&nbsp;<br />10:&nbsp;<br />11:&nbsp;<br />12:&nbsp;<br />13:&nbsp;</code><br />&nbsp;</td><td class='code'><br /><code><span class="synStatement">sub </span><span class="synIdentifier">number_of_children </span>{<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$self</span>            = <span class="synStatement">shift</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$naughty_or_nice</span> = <span class="synStatement">shift</span>;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$sql</span> = &lt;&lt;~<span class="synConstant">'SQL'</span><br /><span class="synStatement">       SELECT</span> count(*)<br />&nbsp;&nbsp;<span class="synStatement">       FROM</span> children<br />&nbsp;<span class="synStatement">       WHERE</span> naughty_or_nice = $<span class="synConstant">1</span><br />&nbsp;&nbsp;&nbsp;&nbsp;SQL<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$dbh</span> = <span class="synIdentifier">$self-&gt;database_handle</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">return</span> <span class="synIdentifier">$dbh-&gt;selectall_arrayref</span>(<span class="synIdentifier">$sql</span>,{},<span class="synIdentifier">$naughty_or_nice</span>)-&gt;[<span class="synConstant">0</span>];<br />}</code><br />&nbsp;</td></table>

"That's awesome.  Not that it matters here, but the way this works is that the
same amount of whitespace that's before the final heredoc terminator is stripped
from the rest of the heredoc.  Maybe now we could remove some of the variables?"

=for html
  <table class='code-listing'><tr><td class='line-numbers'><br /><code>1:&nbsp;<br />2:&nbsp;<br />3:&nbsp;<br />4:&nbsp;<br />5:&nbsp;<br />6:&nbsp;<br />7:&nbsp;<br />8:&nbsp;<br />9:&nbsp;<br />10:&nbsp;<br />11:&nbsp;</code><br />&nbsp;</td><td class='code'><br /><code><span class="synStatement">sub </span><span class="synIdentifier">number_of_children </span>{<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$self</span>            = <span class="synStatement">shift</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">my</span> <span class="synIdentifier">$naughty_or_nice</span> = <span class="synStatement">shift</span>;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="synStatement">return</span> <span class="synIdentifier">$self-&gt;database_handle</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;selectall_arrayref(&lt;&lt;~<span class="synConstant">'SQL'</span>,{},<span class="synIdentifier">$naughty_or_nice</span>)-&gt;[<span class="synConstant">0</span>];<br /><span class="synStatement">       SELECT</span> count(*)<br />&nbsp;&nbsp;<span class="synStatement">       FROM</span> children<br />&nbsp;<span class="synStatement">       WHERE</span> naughty_or_nice = $<span class="synConstant">1</span><br />&nbsp;&nbsp;&nbsp;&nbsp;SQL<br />}</code><br />&nbsp;</td></table>

"There we go.  Now you just need to add some more tests - that broken C<WHERE>
from earlier can't have possibly been executed, otherwise we'd have seen a test
failure - and we're ready to ship..."
